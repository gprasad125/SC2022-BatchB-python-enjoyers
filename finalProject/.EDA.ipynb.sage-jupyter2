{"backend_state":"running","connection_file":"/projects/183af3d5-8548-4a20-9a82-38842b87480b/.local/share/jupyter/runtime/kernel-4fe07e78-3d53-444a-ac44-2f3877239a76.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657139960946,"exec_count":1,"id":"084fa6","input":"import pandas as pd\n\nimport numpy as np\n\nimport plotly.express as px\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns","kernel":"ds_env","pos":0,"start":1657139959028,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139961033,"exec_count":4,"id":"a3ae06","input":"# groupby – allows you to group / aggregate information by various features\n\ndata.groupby(\"Potability\")[\"Solids\"].mean()\n\n# pivot_tables() - read the pandas docs. ","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Potability\n0    21777.490788\n1    22383.991018\nName: Solids, dtype: float64"},"exec_count":4}},"pos":3,"start":1657139961032,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139961047,"exec_count":5,"id":"9bce19","input":"data[\"Conductivity\"] - data[\"Conductivity\"].mean()\n\n\n\narr = np.array([1, 2, 3])\narr * 2 \n\n# can we use np.std() to find the standard deviation of the column? ","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([2, 4, 6])"},"exec_count":5}},"pos":5,"start":1657139961037,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139961290,"exec_count":6,"id":"70c24b","input":"data[\"Potability\"].hist()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":6},"1":{"data":{"image/png":"3845121b61ec31586b122a232fc45379f8c839ea","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":6,"start":1657139961050,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139961828,"exec_count":7,"id":"56b51f","input":"px.scatter(data, x = \"Conductivity\", y = \"Turbidity\", hover_data = [\"Hardness\", \"Solids\", \"Chloramines\", \"Sulfate\", \"Conductivity\"])","kernel":"ds_env","output":{"0":{"data":{"iframe":"8e1a83682080fa6992a51d8f7fe2972a1e89564e"}}},"pos":7,"scrolled":true,"start":1657139961296,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139961975,"exec_count":8,"id":"0081d2","input":"px.scatter_3d(x = data[\"Chloramines\"],y = data[\"Solids\"], z = data[\"ph\"], color = data[\"Hardness\"])","kernel":"ds_env","output":{"0":{"data":{"iframe":"b021797b04dc1c93b13c510872ab66d34d02182f"}}},"pos":8,"start":1657139961837,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139962114,"exec_count":9,"id":"0da742","input":"px.scatter(x = data[\"Hardness\"],\n           y = data[\"Conductivity\"],\n           color = data[\"Potability\"])","kernel":"ds_env","output":{"0":{"data":{"iframe":"98c091f42ebbb60c2155710ddb4d95716f22e2a9"}}},"pos":10,"start":1657139961986,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139962901,"exec_count":12,"id":"dca0b3","input":"px.scatter(data, x = \"Organic_carbon\", y = \"Potability\", hover_data = [\"Potability\"])","kernel":"ds_env","output":{"0":{"data":{"iframe":"c19710f4a9ec732639542eac6591a6dc66bbb173"}}},"pos":13,"start":1657139962560,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139963901,"exec_count":13,"id":"6b3c3e","input":"corrMatrix = data.corr() #creates a correlation matrix (pandas)\nplt.subplots(figsize=(15,10))  \nsns.heatmap(corrMatrix, annot=True)\nplt.show()","kernel":"ds_env","output":{"0":{"data":{"image/png":"3ba3f26beb2c6297e023a5e3faf732536172b5f3","text/plain":"<Figure size 1080x720 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":14,"start":1657139962921,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139964043,"exec_count":14,"id":"c9c456","input":"px.scatter_3d(x = data[\"Sulfate\"],y = data[\"Potability\"], z = data[\"Conductivity\"], color = data[\"ph\"])","kernel":"ds_env","output":{"0":{"data":{"iframe":"cb5dcc6fa810d77e58bfc218dd2a7fdaad35457b"}}},"pos":15,"start":1657139963917,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139964165,"exec_count":15,"id":"30fa9b","input":"fig = px.bar(data, x='Conductivity', y='Trihalomethanes')\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"2b716465c7b20ccffcace658f9bcf9e5427a7960"}}},"pos":17,"start":1657139964050,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139964222,"exec_count":16,"id":"e09eee","input":"import plotly.graph_objects as go\n\nfig = go.Figure(data=go.Violin(y=data['Hardness'], box_visible=True, line_color='black',\n                               meanline_visible=True, fillcolor='lightseagreen', opacity=0.6,\n                               x0='Hardness'))\n\nfig.update_layout(yaxis_zeroline=False)\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"c52d771691c40c09d0def3b5b88eca5759e6b25a"}}},"pos":18,"start":1657139964188,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139964316,"exec_count":17,"id":"2fa6d0","input":"import plotly.express as px\n\nfig = px.violin(data, y=\"Conductivity\", box=True, \n                points='all',\n               )\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"adb813333352559335563725455fc2ab586d6de6"}}},"pos":19,"start":1657139964230,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139964843,"exec_count":18,"id":"3a5e76","input":"sns.displot(data[\"ph\"])\nplt.show","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":18},"1":{"data":{"image/png":"4a6e37ede1acad4e65d029611caa237c42685555","text/plain":"<Figure size 360x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":20,"start":1657139964327,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139965224,"exec_count":19,"id":"f8716d","input":"sns.displot(data[\"Conductivity\"])\nplt.show","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":19},"1":{"data":{"image/png":"798f914ba080c07dad7e48ab2415b20d05302f1f","text/plain":"<Figure size 360x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":21,"start":1657139964852,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139965569,"exec_count":20,"id":"cc2f2c","input":"sns.displot(data[\"Hardness\"])\nplt.show","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":20},"1":{"data":{"image/png":"c8459e9124e43b66da6acde4e83b13b9c395e719","text/plain":"<Figure size 360x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":22,"start":1657139965242,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139966026,"exec_count":21,"id":"f5db85","input":"sns.displot(data[\"Trihalomethanes\"])\nplt.show","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":21},"1":{"data":{"image/png":"747fd0f9ee2081fea98bfb2038bdaf1c6d6d59c7","text/plain":"<Figure size 360x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":23,"start":1657139965595,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139966497,"exec_count":22,"id":"cabc4f","input":"sns.displot(data[\"Solids\"])\nplt.show","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":22},"1":{"data":{"image/png":"b31ba49eae55087f45a4fa4077f579a5d0345e5e","text/plain":"<Figure size 360x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":24,"start":1657139966058,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139966862,"exec_count":23,"id":"1c8ead","input":"sns.displot(data[\"Organic_carbon\"])\nplt.show","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":23},"1":{"data":{"image/png":"213b381b90db99be2ba918c2dc1c5bb4f8244b90","text/plain":"<Figure size 360x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":25,"start":1657139966506,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139967118,"exec_count":24,"id":"807814","input":"sns.displot(data[\"Potability\"])\nplt.show","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":24},"1":{"data":{"image/png":"5975db847f898e46a58a8f5b55584ffa6ee25930","text/plain":"<Figure size 360x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":26,"start":1657139966871,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139967145,"exec_count":25,"id":"536081","input":"def standard_deviation(x):\n    return (x - data[\"Turbidity\"].mean())**2\n\nTurbidity = data[\"Turbidity\"]\n\nTurbidity","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0       2.963135\n1       4.500656\n2       3.055934\n3       4.628771\n4       4.075075\n          ...   \n3271    4.435821\n3272    2.798243\n3273    3.298875\n3274    4.708658\n3275    2.309149\nName: Turbidity, Length: 3276, dtype: float64"},"exec_count":25}},"pos":27,"start":1657139967133,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139967483,"exec_count":26,"id":"32ac8d","input":"data.boxplot(figsize=(14,7))","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":26},"1":{"data":{"image/png":"58293d347076aef22b9b72d5d0b049b3b49841f4","text/plain":"<Figure size 1008x504 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":28,"scrolled":true,"start":1657139967156,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139967497,"exec_count":27,"id":"cdcfc2","input":"data.shape[0]","kernel":"ds_env","output":{"0":{"data":{"text/plain":"3276"},"exec_count":27}},"pos":29,"start":1657139967492,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139967684,"exec_count":28,"id":"2592e4","input":"\npx.parallel_coordinates(data, color=\"Potability\", range_color = [0, 1], labels={\n                \"Solids\": \"Solids\", \"ph\": \"ph\", },\n                             color_continuous_scale=px.colors.diverging.Tealrose,\n                             color_continuous_midpoint=2)","kernel":"ds_env","output":{"0":{"data":{"iframe":"ec84711a9fd3019b4c4e288b234a23627479ef13"}}},"pos":30,"scrolled":true,"start":1657139967510,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139968127,"exec_count":29,"id":"c378e4","input":"import numpy as np\n\nstandard_deviation = data[\"ph\"].apply(lambda x : (x - data[\"ph\"].mean())/np.std(data[\"ph\"]))\n\nph = \"pH\"\nprint(f\"This is the standard deviation of the column {ph}: {standard_deviation}\")\nprint(f\"This is the average {standard_deviation.mean()}\")\nprint(f\"This is the range of the standard deviation {standard_deviation.max()-standard_deviation.min()}\")","kernel":"ds_env","output":{"0":{"name":"stdout","text":"This is the standard deviation of the column pH: 0            NaN\n1      -2.110818\n2       0.638838\n3       0.775374\n4       1.261849\n          ...   \n3271   -1.513577\n3272    0.456742\n3273    1.467169\n3274   -1.225841\n3275    0.498030\nName: ph, Length: 3276, dtype: float64\nThis is the average 1.072698682324271e-14\nThis is the range of the standard deviation 8.782752752979828\n"}},"pos":31,"start":1657139967693,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139968144,"exec_count":30,"id":"a17105","input":"# data.head()\n\ntype(len)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"builtin_function_or_method"},"exec_count":30}},"pos":32,"scrolled":true,"start":1657139968140,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139968386,"exec_count":31,"id":"0464f9","input":"data[\"Conductivity\"].hist()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":31},"1":{"data":{"image/png":"b8c706c36e04742b212dc117c6b7863a8357d20d","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":33,"start":1657139968160,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139968409,"exec_count":33,"id":"6694e0","input":"Said = \"ph\"\nJason = \"Chloramines\"\nSean = \"Turbidity\"\nAnnya = \"Organic_carbon\"\nEthan = \"Conductvity\"\nSmayan = \"Sulfate\"\n\n# Using .apply(), can you standardize each of these columns?\n\n# For our example, z = (x - mean(column)) / (std_dev(column))\n\n# [PANDAS DOCUMENTATION] = https://pandas.pydata.org/docs/reference/index.html#api\n# [NUMPY DOCUMENTATION] = https://numpy.org/doc/stable/reference/index.html#reference","kernel":"ds_env","pos":36,"start":1657139968406,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139968639,"exec_count":34,"id":"809b00","input":"out = data[\"Organic_carbon\"].apply(lambda x: (x - data[\"Organic_carbon\"].mean())/np.std(data[\"Organic_carbon\"]))\nprint(out)\nprint(abs(out).idxmax(), abs(out).max())\nprint(abs(out).idxmin(), abs(out).min())","kernel":"ds_env","output":{"0":{"name":"stdout","text":"3       1.227032\n4      -0.842154\n5      -1.792340\n6      -0.170876\n7      -0.599824\n          ...   \n3267   -1.341281\n3268    0.559422\n3269    0.546021\n3270   -0.688929\n3271   -0.139372\nName: Organic_carbon, Length: 2011, dtype: float64\n2236 3.8052031995701694\n1797 0.0003651276819162336\n"}},"pos":37,"start":1657139968419,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139968650,"exec_count":35,"id":"92d195","input":"arr = np.array([1, 0, 5, 7, 0])\narr.mean()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"2.6"},"exec_count":35}},"pos":38,"start":1657139968646,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139968896,"exec_count":36,"id":"06b5a8","input":"standardized = data[\"Chloramines\"].apply(lambda x: (x-data[\"Chloramines\"].mean())/np.std(data[\"Chloramines\"]))\nprint(standardized)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"3       0.583804\n4      -0.370947\n5       0.259104\n6       0.239248\n7      -1.622878\n          ...   \n3267   -0.528284\n3268    0.362137\n3269    1.343596\n3270    0.387023\n3271    0.020386\nName: Chloramines, Length: 2011, dtype: float64\n"}},"pos":39,"scrolled":true,"start":1657139968655,"state":"done","type":"cell"}
{"cell_type":"code","end":1657139968911,"exec_count":37,"id":"06dc19","input":"# imputation\n# one of MANY ways to handle null data\n# Can we replace Empty values with actual values? If so, what values are we replacing it with?\n\n# https://towardsdatascience.com/6-different-ways-to-compensate-for-missing-values-data-imputation-with-examples-6022d9ca0779\n","kernel":"ds_env","pos":41,"start":1657139968910,"state":"done","type":"cell"}
{"cell_type":"code","end":1657143482380,"exec_count":59,"id":"6d97c4","input":"data.head()\n\n# potability = is the water safe to drink?\n\ndata.shape","kernel":"ds_env","output":{"0":{"data":{"text/plain":"(3276, 10)"},"exec_count":59}},"pos":2,"scrolled":true,"start":1657143482371,"state":"done","type":"cell"}
{"cell_type":"code","end":1657145811086,"exec_count":74,"id":"a2efab","input":"import plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"Sulfate\", y=\"Conductivity\", trendline=\"ols\")\nfig.show()","kernel":"ds_env","output":{"0":{"ename":"ValueError","evalue":"Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species', 'species_id'] but received: Sulfate","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [74]\u001b[0m, in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mplotly\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mexpress\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpx\u001b[39;00m\n\u001b[1;32m      3\u001b[0m df \u001b[38;5;241m=\u001b[39m px\u001b[38;5;241m.\u001b[39mdata\u001b[38;5;241m.\u001b[39miris()\n\u001b[0;32m----> 4\u001b[0m fig \u001b[38;5;241m=\u001b[39m \u001b[43mpx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscatter\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mSulfate\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mConductivity\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrendline\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mols\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      5\u001b[0m fig\u001b[38;5;241m.\u001b[39mshow()\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/express/_chart_types.py:66\u001b[0m, in \u001b[0;36mscatter\u001b[0;34m(data_frame, x, y, color, symbol, size, hover_name, hover_data, custom_data, text, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, orientation, color_discrete_sequence, color_discrete_map, color_continuous_scale, range_color, color_continuous_midpoint, symbol_sequence, symbol_map, opacity, size_max, marginal_x, marginal_y, trendline, trendline_options, trendline_color_override, trendline_scope, log_x, log_y, range_x, range_y, render_mode, title, template, width, height)\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mscatter\u001b[39m(\n\u001b[1;32m     13\u001b[0m     data_frame\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m     14\u001b[0m     x\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     60\u001b[0m     height\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m     61\u001b[0m ):\n\u001b[1;32m     62\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m     63\u001b[0m \u001b[38;5;124;03m    In a scatter plot, each row of `data_frame` is represented by a symbol\u001b[39;00m\n\u001b[1;32m     64\u001b[0m \u001b[38;5;124;03m    mark in 2D space.\u001b[39;00m\n\u001b[1;32m     65\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m---> 66\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mmake_figure\u001b[49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlocals\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconstructor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgo\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mScatter\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/express/_core.py:1945\u001b[0m, in \u001b[0;36mmake_figure\u001b[0;34m(args, constructor, trace_patch, layout_patch)\u001b[0m\n\u001b[1;32m   1942\u001b[0m layout_patch \u001b[38;5;241m=\u001b[39m layout_patch \u001b[38;5;129;01mor\u001b[39;00m {}\n\u001b[1;32m   1943\u001b[0m apply_default_cascade(args)\n\u001b[0;32m-> 1945\u001b[0m args \u001b[38;5;241m=\u001b[39m \u001b[43mbuild_dataframe\u001b[49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconstructor\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1946\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m constructor \u001b[38;5;129;01min\u001b[39;00m [go\u001b[38;5;241m.\u001b[39mTreemap, go\u001b[38;5;241m.\u001b[39mSunburst, go\u001b[38;5;241m.\u001b[39mIcicle] \u001b[38;5;129;01mand\u001b[39;00m args[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpath\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   1947\u001b[0m     args \u001b[38;5;241m=\u001b[39m process_dataframe_hierarchy(args)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/express/_core.py:1405\u001b[0m, in \u001b[0;36mbuild_dataframe\u001b[0;34m(args, constructor)\u001b[0m\n\u001b[1;32m   1402\u001b[0m     args[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcolor\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1403\u001b[0m \u001b[38;5;66;03m# now that things have been prepped, we do the systematic rewriting of `args`\u001b[39;00m\n\u001b[0;32m-> 1405\u001b[0m df_output, wide_id_vars \u001b[38;5;241m=\u001b[39m \u001b[43mprocess_args_into_dataframe\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1406\u001b[0m \u001b[43m    \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mwide_mode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvar_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue_name\u001b[49m\n\u001b[1;32m   1407\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1409\u001b[0m \u001b[38;5;66;03m# now that `df_output` exists and `args` contains only references, we complete\u001b[39;00m\n\u001b[1;32m   1410\u001b[0m \u001b[38;5;66;03m# the special-case and wide-mode handling by further rewriting args and/or mutating\u001b[39;00m\n\u001b[1;32m   1411\u001b[0m \u001b[38;5;66;03m# df_output\u001b[39;00m\n\u001b[1;32m   1413\u001b[0m count_name \u001b[38;5;241m=\u001b[39m _escape_col_name(df_output, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcount\u001b[39m\u001b[38;5;124m\"\u001b[39m, [var_name, value_name])\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/express/_core.py:1207\u001b[0m, in \u001b[0;36mprocess_args_into_dataframe\u001b[0;34m(args, wide_mode, var_name, value_name)\u001b[0m\n\u001b[1;32m   1205\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m argument \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mindex\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m   1206\u001b[0m             err_msg \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m To use the index, pass it in directly as `df.index`.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m-> 1207\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(err_msg)\n\u001b[1;32m   1208\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m length \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(df_input[argument]) \u001b[38;5;241m!=\u001b[39m length:\n\u001b[1;32m   1209\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   1210\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAll arguments should have the same length. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1211\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThe length of column argument `df[\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m]` is \u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m, whereas the \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1218\u001b[0m         )\n\u001b[1;32m   1219\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species', 'species_id'] but received: Sulfate"]}},"pos":40,"start":1657145810876,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"0237a4","input":"data2 = data[[\"ph\", \"Hardness\", \"Solids\", \"Chloramines\", \"Sulfate\", \"Conductivity\", \"Organic_carbon\", \"Trihalomethanes\", \"Turbidity\", \"Potability\"]]\nscatter_matrix = px.scatter_matrix(data2)\nscatter_matrix.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"edb92d616296f1ae26a4904f6fcffa9e7d2f77d4"}}},"pos":11,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"e22782","input":"px.scatter(data, x = \"ph\", y = \"Chloramines\", hover_data = [\"Hardness\", \"Solids\"])","kernel":"ds_env","output":{"0":{"data":{"iframe":"1670e6282ee72137be0354dde0aa0781853f29b8"}}},"pos":12,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":32,"id":"cb255b","input":"# Standardize Data:\n\n# For some value \"x\" in a dataset of [x1, x2, x3, ... xN], the standardized form of x\n# = (x - mean(dataset)) / std_dev(dataset)\n\ndata.columns\n\ndata.dropna(axis=0, inplace = True)\n","kernel":"ds_env","pos":34,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":57,"id":"ca35ee","input":"data = pd.read_csv(\"\n./Data/water_potability.csv\")","kernel":"ds_env","pos":1,"state":"done","type":"cell"}
{"cell_type":"code","id":"ab2c55","input":"","pos":4,"type":"cell"}
{"cell_type":"code","id":"b99d3a","input":"","pos":16,"type":"cell"}
{"cell_type":"code","id":"ecdbfb","input":"","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"6213fd","input":"This plot shows the correlation between ... and the reason it's important is because ...\n","pos":13.5,"type":"cell"}
{"cell_type":"raw","id":"a3f4e6","input":"px.scatter(x = data[\"ph\"],\n          y = data[\"Hardness\"],\n          color = data[\"Potability\"])","pos":9,"state":"done","type":"cell"}
{"end":1657140096788,"exec_count":44,"id":"d83550","input":"data[\"Potability\"] = dummies[0]","kernel":"ds_env","pos":41.75,"start":1657140096784,"state":"done","type":"cell"}
{"end":1657140103111,"exec_count":45,"id":"440503","input":"target = data[\"Potability\"]\nfeatures = data.drop(columns = [\"Potability\"], axis = 1)\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.25)","kernel":"ds_env","pos":41.875,"start":1657140103086,"state":"done","type":"cell"}
{"end":1657140381265,"exec_count":51,"id":"b192d0","input":"from sklearn.neural_network import MLPClassifier\n\nmlp = MLPClassifier(solver='lbfgs', alpha=1e-5, max_iter = 10000, hidden_layer_sizes=(5, 2), random_state=None).fit(x_train,y_train)\ny_hat_mlp = mlp.predict(x_test)\nmean_squared_error2 = (np.sum((y_test - y_hat_mlp)**2))/len(y_test)\nprint(mean_squared_error2)\nprint(mlp.score(x_test,y_test))\nsns.heatmap(confusion_matrix(y_test, y_hat_mlp), annot = True, fmt ='g')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.3757455268389662\n0.6242544731610338\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":51},"2":{"data":{"image/png":"271670767993dc7e99bf45b31b93c19c80667acc","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":45,"start":1657140380590,"state":"done","type":"cell"}
{"end":1657143440478,"exec_count":54,"id":"000ab5","input":"data.dropna().shape","kernel":"ds_env","output":{"0":{"data":{"text/plain":"(2011, 10)"},"exec_count":54}},"pos":46,"start":1657143440461,"state":"done","type":"cell"}
{"end":1657143444151,"exec_count":55,"id":"32af57","input":"data.shape","kernel":"ds_env","output":{"0":{"data":{"text/plain":"(2011, 10)"},"exec_count":55}},"pos":47,"start":1657143444143,"state":"done","type":"cell"}
{"end":1657143508276,"exec_count":61,"id":"80094a","input":"data.dropna()[\"Potability\"].value_counts()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0    1200\n1     811\nName: Potability, dtype: int64"},"exec_count":61}},"pos":48,"start":1657143508263,"state":"done","type":"cell"}
{"end":1657143741639,"exec_count":68,"id":"06c1d3","input":"features = data.drop(columns = [\"Potability\"], axis = 1)\nfeatures.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ph</th>\n      <th>Hardness</th>\n      <th>Solids</th>\n      <th>Chloramines</th>\n      <th>Sulfate</th>\n      <th>Conductivity</th>\n      <th>Organic_carbon</th>\n      <th>Trihalomethanes</th>\n      <th>Turbidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>204.890455</td>\n      <td>20791.318981</td>\n      <td>7.300212</td>\n      <td>368.516441</td>\n      <td>564.308654</td>\n      <td>10.379783</td>\n      <td>86.990970</td>\n      <td>2.963135</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.716080</td>\n      <td>129.422921</td>\n      <td>18630.057858</td>\n      <td>6.635246</td>\n      <td>NaN</td>\n      <td>592.885359</td>\n      <td>15.180013</td>\n      <td>56.329076</td>\n      <td>4.500656</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.099124</td>\n      <td>224.236259</td>\n      <td>19909.541732</td>\n      <td>9.275884</td>\n      <td>NaN</td>\n      <td>418.606213</td>\n      <td>16.868637</td>\n      <td>66.420093</td>\n      <td>3.055934</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.316766</td>\n      <td>214.373394</td>\n      <td>22018.417441</td>\n      <td>8.059332</td>\n      <td>356.886136</td>\n      <td>363.266516</td>\n      <td>18.436524</td>\n      <td>100.341674</td>\n      <td>4.628771</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9.092223</td>\n      <td>181.101509</td>\n      <td>17978.986339</td>\n      <td>6.546600</td>\n      <td>310.135738</td>\n      <td>398.410813</td>\n      <td>11.558279</td>\n      <td>31.997993</td>\n      <td>4.075075</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         ph    Hardness        Solids  Chloramines     Sulfate  Conductivity  \\\n0       NaN  204.890455  20791.318981     7.300212  368.516441    564.308654   \n1  3.716080  129.422921  18630.057858     6.635246         NaN    592.885359   \n2  8.099124  224.236259  19909.541732     9.275884         NaN    418.606213   \n3  8.316766  214.373394  22018.417441     8.059332  356.886136    363.266516   \n4  9.092223  181.101509  17978.986339     6.546600  310.135738    398.410813   \n\n   Organic_carbon  Trihalomethanes  Turbidity  \n0       10.379783        86.990970   2.963135  \n1       15.180013        56.329076   4.500656  \n2       16.868637        66.420093   3.055934  \n3       18.436524       100.341674   4.628771  \n4       11.558279        31.997993   4.075075  "},"exec_count":68}},"pos":49,"start":1657143741606,"state":"done","type":"cell"}
{"end":1657143789568,"exec_count":70,"id":"9f04ad","input":"outcome = data[\"Potability\"]\noutcome.head()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0    0\n1    0\n2    0\n3    0\n4    0\nName: Potability, dtype: int64"},"exec_count":70}},"pos":50,"start":1657143789559,"state":"done","type":"cell"}
{"exec_count":38,"id":"a71baf","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\ndummies = pd.get_dummies(data[\"Potability\"])\ndummies","kernel":"ds_env","output":{"0":{"ename":"KeyError","evalue":"\"['diagnosis'] not found in axis\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Input \u001b[0;32mIn [38]\u001b[0m, in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m dummies \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mget_dummies(data[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPotability\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n\u001b[1;32m      5\u001b[0m dummies\n\u001b[0;32m----> 7\u001b[0m \u001b[43mdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mdiagnosis\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minplace\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m      9\u001b[0m target \u001b[38;5;241m=\u001b[39m data[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPotability\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m     10\u001b[0m features \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mdrop(columns \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPotability\u001b[39m\u001b[38;5;124m\"\u001b[39m], axis \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/util/_decorators.py:311\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    305\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[1;32m    306\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[1;32m    307\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39marguments),\n\u001b[1;32m    308\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[1;32m    309\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mstacklevel,\n\u001b[1;32m    310\u001b[0m     )\n\u001b[0;32m--> 311\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/frame.py:4954\u001b[0m, in \u001b[0;36mDataFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4806\u001b[0m \u001b[38;5;129m@deprecate_nonkeyword_arguments\u001b[39m(version\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, allowed_args\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mself\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlabels\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n\u001b[1;32m   4807\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdrop\u001b[39m(\n\u001b[1;32m   4808\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4815\u001b[0m     errors: \u001b[38;5;28mstr\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   4816\u001b[0m ):\n\u001b[1;32m   4817\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   4818\u001b[0m \u001b[38;5;124;03m    Drop specified labels from rows or columns.\u001b[39;00m\n\u001b[1;32m   4819\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4952\u001b[0m \u001b[38;5;124;03m            weight  1.0     0.8\u001b[39;00m\n\u001b[1;32m   4953\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 4954\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   4955\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlabels\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4956\u001b[0m \u001b[43m        \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4957\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4958\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4959\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4960\u001b[0m \u001b[43m        \u001b[49m\u001b[43minplace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minplace\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4961\u001b[0m \u001b[43m        \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4962\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/generic.py:4267\u001b[0m, in \u001b[0;36mNDFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4265\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m axis, labels \u001b[38;5;129;01min\u001b[39;00m axes\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m   4266\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m labels \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 4267\u001b[0m         obj \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_drop_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4269\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inplace:\n\u001b[1;32m   4270\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_inplace(obj)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/generic.py:4311\u001b[0m, in \u001b[0;36mNDFrame._drop_axis\u001b[0;34m(self, labels, axis, level, errors, consolidate, only_slice)\u001b[0m\n\u001b[1;32m   4309\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mdrop(labels, level\u001b[38;5;241m=\u001b[39mlevel, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[1;32m   4310\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4311\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m \u001b[43maxis\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4312\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mget_indexer(new_axis)\n\u001b[1;32m   4314\u001b[0m \u001b[38;5;66;03m# Case for non-unique axis\u001b[39;00m\n\u001b[1;32m   4315\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:6644\u001b[0m, in \u001b[0;36mIndex.drop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6642\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mask\u001b[38;5;241m.\u001b[39many():\n\u001b[1;32m   6643\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m-> 6644\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlist\u001b[39m(labels[mask])\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not found in axis\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6645\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m indexer[\u001b[38;5;241m~\u001b[39mmask]\n\u001b[1;32m   6646\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdelete(indexer)\n","\u001b[0;31mKeyError\u001b[0m: \"['diagnosis'] not found in axis\""]}},"pos":41.5,"state":"done","type":"cell"}
{"exec_count":46,"id":"df65b4","input":"import sklearn\nfrom sklearn.neighbors import KNeighborsClassifier as KNN\n\nk = 7\nmy_KNN_model = KNN(n_neighbors=k)\nmy_KNN_model.fit(x_train, y_train) #i dropped the rows with null values, so it works now","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=7)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=7)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=7)"},"exec_count":46}},"pos":42,"state":"done","type":"cell"}
{"exec_count":47,"id":"99f6c0","input":"from sklearn.metrics import confusion_matrix\ny_hat = my_KNN_model.predict(x_test)\nmean_squared_error = (np.sum((y_test - y_hat)**2))/len(y_test)\nprint(mean_squared_error)\nprint(my_KNN_model.score(x_test,y_test)) #knn model --> very inaccurate\nsns.heatmap(confusion_matrix(y_test, y_hat), annot = True, fmt ='g')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.43141153081510936\n0.5685884691848907\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":47},"2":{"data":{"image/png":"c598594b44f477de2c938d519d8770454581940f","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":44,"state":"done","type":"cell"}
{"id":"7efc26","input":"","pos":41.25,"type":"cell"}
{"id":"bc4e5b","input":"This graph shows ","pos":29.5,"type":"cell"}
{"id":"e25b18","input":"","pos":51,"type":"cell"}
{"id":0,"time":1657146839755,"type":"user"}
{"last_load":1657042853764,"type":"file"}