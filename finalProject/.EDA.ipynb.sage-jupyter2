{"backend_state":"init","connection_file":"/projects/183af3d5-8548-4a20-9a82-38842b87480b/.local/share/jupyter/runtime/kernel-b87b798e-b041-401f-a1a7-6ce885162ae0.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"000ab5","input":"data.shape","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"06dc19","input":"","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"32af57","input":"data.dropna()[\"Potability\"].value_counts()","pos":47,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"80094a","input":"features = data.drop(columns = [\"Potability\"], axis = 1)\nfeatures.head()","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a2efab","input":"# imputation\n# one of MANY ways to handle null data\n# Can we replace Empty values with actual values? If so, what values are we replacing it with?\n\n# https://towardsdatascience.com/6-different-ways-to-compensate-for-missing-values-data-imputation-with-examples-6022d9ca0779\n","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ac32a4","input":"","pos":55,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"084fa6","input":"import pandas as pd\n\nimport numpy as np\n\nimport plotly.express as px\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"8dfdd3","input":"data.tail(10)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ph</th>\n      <th>Hardness</th>\n      <th>Solids</th>\n      <th>Chloramines</th>\n      <th>Sulfate</th>\n      <th>Conductivity</th>\n      <th>Organic_carbon</th>\n      <th>Trihalomethanes</th>\n      <th>Turbidity</th>\n      <th>Potability</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3266</th>\n      <td>8.372910</td>\n      <td>169.087052</td>\n      <td>14622.745494</td>\n      <td>7.547984</td>\n      <td>NaN</td>\n      <td>464.525552</td>\n      <td>11.083027</td>\n      <td>38.435151</td>\n      <td>4.906358</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3267</th>\n      <td>8.989900</td>\n      <td>215.047358</td>\n      <td>15921.412018</td>\n      <td>6.297312</td>\n      <td>312.931022</td>\n      <td>390.410231</td>\n      <td>9.899115</td>\n      <td>55.069304</td>\n      <td>4.613843</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3268</th>\n      <td>6.702547</td>\n      <td>207.321086</td>\n      <td>17246.920347</td>\n      <td>7.708117</td>\n      <td>304.510230</td>\n      <td>329.266002</td>\n      <td>16.217303</td>\n      <td>28.878601</td>\n      <td>3.442983</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3269</th>\n      <td>11.491011</td>\n      <td>94.812545</td>\n      <td>37188.826022</td>\n      <td>9.263166</td>\n      <td>258.930600</td>\n      <td>439.893618</td>\n      <td>16.172755</td>\n      <td>41.558501</td>\n      <td>4.369264</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3270</th>\n      <td>6.069616</td>\n      <td>186.659040</td>\n      <td>26138.780191</td>\n      <td>7.747547</td>\n      <td>345.700257</td>\n      <td>415.886955</td>\n      <td>12.067620</td>\n      <td>60.419921</td>\n      <td>3.669712</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3271</th>\n      <td>4.668102</td>\n      <td>193.681735</td>\n      <td>47580.991603</td>\n      <td>7.166639</td>\n      <td>359.948574</td>\n      <td>526.424171</td>\n      <td>13.894419</td>\n      <td>66.687695</td>\n      <td>4.435821</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3272</th>\n      <td>7.808856</td>\n      <td>193.553212</td>\n      <td>17329.802160</td>\n      <td>8.061362</td>\n      <td>NaN</td>\n      <td>392.449580</td>\n      <td>19.903225</td>\n      <td>NaN</td>\n      <td>2.798243</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3273</th>\n      <td>9.419510</td>\n      <td>175.762646</td>\n      <td>33155.578218</td>\n      <td>7.350233</td>\n      <td>NaN</td>\n      <td>432.044783</td>\n      <td>11.039070</td>\n      <td>69.845400</td>\n      <td>3.298875</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3274</th>\n      <td>5.126763</td>\n      <td>230.603758</td>\n      <td>11983.869376</td>\n      <td>6.303357</td>\n      <td>NaN</td>\n      <td>402.883113</td>\n      <td>11.168946</td>\n      <td>77.488213</td>\n      <td>4.708658</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3275</th>\n      <td>7.874671</td>\n      <td>195.102299</td>\n      <td>17404.177061</td>\n      <td>7.509306</td>\n      <td>NaN</td>\n      <td>327.459760</td>\n      <td>16.140368</td>\n      <td>78.698446</td>\n      <td>2.309149</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"             ph    Hardness        Solids  Chloramines     Sulfate  \\\n3266   8.372910  169.087052  14622.745494     7.547984         NaN   \n3267   8.989900  215.047358  15921.412018     6.297312  312.931022   \n3268   6.702547  207.321086  17246.920347     7.708117  304.510230   \n3269  11.491011   94.812545  37188.826022     9.263166  258.930600   \n3270   6.069616  186.659040  26138.780191     7.747547  345.700257   \n3271   4.668102  193.681735  47580.991603     7.166639  359.948574   \n3272   7.808856  193.553212  17329.802160     8.061362         NaN   \n3273   9.419510  175.762646  33155.578218     7.350233         NaN   \n3274   5.126763  230.603758  11983.869376     6.303357         NaN   \n3275   7.874671  195.102299  17404.177061     7.509306         NaN   \n\n      Conductivity  Organic_carbon  Trihalomethanes  Turbidity  Potability  \n3266    464.525552       11.083027        38.435151   4.906358           1  \n3267    390.410231        9.899115        55.069304   4.613843           1  \n3268    329.266002       16.217303        28.878601   3.442983           1  \n3269    439.893618       16.172755        41.558501   4.369264           1  \n3270    415.886955       12.067620        60.419921   3.669712           1  \n3271    526.424171       13.894419        66.687695   4.435821           1  \n3272    392.449580       19.903225              NaN   2.798243           1  \n3273    432.044783       11.039070        69.845400   3.298875           1  \n3274    402.883113       11.168946        77.488213   4.708658           1  \n3275    327.459760       16.140368        78.698446   2.309149           1  "},"exec_count":10,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"e09eee","input":"import plotly.graph_objects as go\n\nfig = go.Figure(data=go.Violin(y=data['Hardness'], box_visible=True, line_color='black',\n                               meanline_visible=True, fillcolor='lightseagreen', opacity=0.6,\n                               x0='Hardness'))\n\nfig.update_layout(yaxis_zeroline=False)\nfig.show()","output":{"0":{"data":{"iframe":"7a99ce50717cc5dc9276b43cf13b735cc2df7eb5"},"exec_count":16,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"2fa6d0","input":"import plotly.express as px\n\nfig = px.violin(data, y=\"Conductivity\", box=True, \n                points='all',\n               )\nfig.show()","output":{"0":{"data":{"iframe":"c0c7b41422a3880a90b4937585ad9df51807b06e"},"exec_count":17,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"3a5e76","input":"sns.displot(data[\"ph\"])\nplt.show","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":18,"output_type":"execute_result"},"1":{"data":{"image/png":"4a6e37ede1acad4e65d029611caa237c42685555","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":18,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"f8716d","input":"sns.displot(data[\"Conductivity\"])\nplt.show","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":19,"output_type":"execute_result"},"1":{"data":{"image/png":"798f914ba080c07dad7e48ab2415b20d05302f1f","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":19,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"ca35ee","input":"data = pd.read_csv(\"./Data/water_potability.csv\")","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"cc2f2c","input":"sns.displot(data[\"Hardness\"])\nplt.show","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":20,"output_type":"execute_result"},"1":{"data":{"image/png":"c8459e9124e43b66da6acde4e83b13b9c395e719","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":20,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"f5db85","input":"sns.displot(data[\"Trihalomethanes\"])\nplt.show","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":21,"output_type":"execute_result"},"1":{"data":{"image/png":"747fd0f9ee2081fea98bfb2038bdaf1c6d6d59c7","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":21,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"cabc4f","input":"sns.displot(data[\"Solids\"])\nplt.show","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":22,"output_type":"execute_result"},"1":{"data":{"image/png":"b31ba49eae55087f45a4fa4077f579a5d0345e5e","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":22,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"1c8ead","input":"sns.displot(data[\"Organic_carbon\"])\nplt.show","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":23,"output_type":"execute_result"},"1":{"data":{"image/png":"213b381b90db99be2ba918c2dc1c5bb4f8244b90","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":23,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"807814","input":"sns.displot(data[\"Potability\"])\nplt.show","output":{"0":{"data":{"text/plain":"<function matplotlib.pyplot.show(close=None, block=None)>"},"exec_count":24,"output_type":"execute_result"},"1":{"data":{"image/png":"5975db847f898e46a58a8f5b55584ffa6ee25930","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":24,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"536081","input":"def standard_deviation(x):\n    return (x - data[\"Turbidity\"].mean())**2\n\nTurbidity = data[\"Turbidity\"]\n\nTurbidity","output":{"0":{"data":{"text/plain":"0       2.963135\n1       4.500656\n2       3.055934\n3       4.628771\n4       4.075075\n          ...   \n3271    4.435821\n3272    2.798243\n3273    3.298875\n3274    4.708658\n3275    2.309149\nName: Turbidity, Length: 3276, dtype: float64"},"exec_count":25,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"32ac8d","input":"data.boxplot(figsize=(14,7))","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":26,"output_type":"execute_result"},"1":{"data":{"image/png":"58293d347076aef22b9b72d5d0b049b3b49841f4","text/plain":"<Figure size 1008x504 with 1 Axes>"},"exec_count":26,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":21,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"cdcfc2","input":"data.shape[0]","output":{"0":{"data":{"text/plain":"3276"},"exec_count":27,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"2592e4","input":"\npx.parallel_coordinates(data, color=\"Potability\", range_color = [0, 1], labels={\n                \"Solids\": \"Solids\", \"ph\": \"ph\", },\n                             color_continuous_scale=px.colors.diverging.Tealrose,\n                             color_continuous_midpoint=2)","output":{"0":{"data":{"iframe":"62f134eeebc7b8c38889ec2846c6ead91f0b3d83"},"exec_count":28,"output_type":"execute_result"}},"pos":23,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"f9d99b","input":"import numpy as np\n\nstandard_deviation = data[\"ph\"].apply(lambda x : (x - data[\"ph\"].mean())/np.std(data[\"ph\"]))\n\nph = \"pH\"\nprint(f\"This is the standard deviation of the column {ph}: {standard_deviation}\")\nprint(f\"This is the average {standard_deviation.mean()}\")\nprint(f\"This is the range of the standard deviation {standard_deviation.max()-standard_deviation.min()}\")","output":{"0":{"name":"stdout","output_type":"stream","text":"This is the standard deviation of the column pH: 0            NaN\n1      -2.110818\n2       0.638838\n3       0.775374\n4       1.261849\n          ...   \n3271   -1.513577\n3272    0.456742\n3273    1.467169\n3274   -1.225841\n3275    0.498030\nName: ph, Length: 3276, dtype: float64\nThis is the average 1.072698682324271e-14\nThis is the range of the standard deviation 8.782752752979828\n"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"c378e4","input":"# data.head()\n\ntype(len)","output":{"0":{"data":{"text/plain":"builtin_function_or_method"},"exec_count":30,"output_type":"execute_result"}},"pos":25,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"a17105","input":"data[\"Conductivity\"].hist()","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":31,"output_type":"execute_result"},"1":{"data":{"image/png":"b8c706c36e04742b212dc117c6b7863a8357d20d","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":31,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"0464f9","input":"# Standardize Data:\n\n# For some value \"x\" in a dataset of [x1, x2, x3, ... xN], the standardized form of x\n# = (x - mean(dataset)) / std_dev(dataset)\n\ndata.columns\n\ndata.dropna(axis=0, inplace = True)\n","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"cb255b","input":"fig = px.scatter(data, x=\"Sulfate\", y=\"Organic_carbon\", color=\"Chloramines\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\", template=\"plotly_dark\")\nfig.show()","output":{"0":{"data":{"iframe":"8b634cbb33630c15e931bb0a4add92bca714c0bf"},"exec_count":33,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"35523c","input":"fig = px.violin(data, y=\"Chloramines\", x=\"ph\", color=\"Potability\", box=True, points=\"all\", hover_data=data.columns)\nfig.show()","output":{"0":{"data":{"iframe":"d15148011bf5feb61d296708439ce50fd6fd6648"},"exec_count":34,"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"c47ff7","input":"fig = px.parallel_categories(data, color=\"Potability\", color_continuous_scale=px.colors.sequential.Inferno, range_color = [0, 1])\nfig.show()","output":{"0":{"data":{"iframe":"8c25a290982b31059b70c2dbbeddff8cd30a39e5"},"exec_count":36,"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"3938f9","input":"fig = px.scatter(data, x=\"ph\", y=\"Sulfate\", size=\"Conductivity\", color=\"ph\",\n           hover_name=\"ph\", log_x=True, size_max=60)\nfig.show()","output":{"0":{"data":{"iframe":"c3ebae610763f6f5f90fae8bd50a48374aabe7b3"},"exec_count":37,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"a35cf4","input":"fig = px.box(data, x=\"ph\", y=\"Sulfate\", color=\"Potability\", notched=True)\nfig.show()","output":{"0":{"data":{"iframe":"098e98cedbcee224f0de738ecde8e13a11e7f27e"},"exec_count":38,"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"ecdbfb","input":"Said = \"ph\"\nJason = \"Chloramines\"\nSean = \"Turbidity\"\nAnnya = \"Organic_carbon\"\nEthan = \"Conductvity\"\nSmayan = \"Sulfate\"\n\n# Using .apply(), can you standardize each of these columns?\n\n# For our example, z = (x - mean(column)) / (std_dev(column))\n\n# [PANDAS DOCUMENTATION] = https://pandas.pydata.org/docs/reference/index.html#api\n# [NUMPY DOCUMENTATION] = https://numpy.org/doc/stable/reference/index.html#reference","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"a3ae06","input":"# groupby – allows you to group / aggregate information by various features\n\ndata.groupby(\"Potability\")[\"Solids\"].mean()\n\n# pivot_tables() - read the pandas docs. ","output":{"0":{"data":{"text/plain":"Potability\n0    21777.490788\n1    22383.991018\nName: Solids, dtype: float64"},"exec_count":4,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"e2d9f7","input":"data.corr()[\"ph\"]","output":{"0":{"data":{"text/plain":"ph                 1.000000\nHardness           0.082096\nSolids            -0.089288\nChloramines       -0.034350\nSulfate            0.018203\nConductivity       0.018614\nOrganic_carbon     0.043503\nTrihalomethanes    0.003354\nTurbidity         -0.039057\nPotability        -0.003556\nName: ph, dtype: float64"},"exec_count":4,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"6694e0","input":"out = data[\"Organic_carbon\"].apply(lambda x: (x - data[\"Organic_carbon\"].mean())/np.std(data[\"Organic_carbon\"]))\nprint(out)\nprint(abs(out).idxmax(), abs(out).max())\nprint(abs(out).idxmin(), abs(out).min())","output":{"0":{"name":"stdout","output_type":"stream","text":"3       1.227032\n4      -0.842154\n5      -1.792340\n6      -0.170876\n7      -0.599824\n          ...   \n3267   -1.341281\n3268    0.559422\n3269    0.546021\n3270   -0.688929\n3271   -0.139372\nName: Organic_carbon, Length: 2011, dtype: float64\n2236 3.8052031995701694\n1797 0.0003651276819162336\n"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"809b00","input":"arr = np.array([1, 0, 5, 7, 0])\narr.mean()","output":{"0":{"data":{"text/plain":"2.6"},"exec_count":41,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"92d195","input":"standardized = data[\"Chloramines\"].apply(lambda x: (x-data[\"Chloramines\"].mean())/np.std(data[\"Chloramines\"]))\nprint(standardized)","output":{"0":{"name":"stdout","output_type":"stream","text":"3       0.583804\n4      -0.370947\n5       0.259104\n6       0.239248\n7      -1.622878\n          ...   \n3267   -0.528284\n3268    0.362137\n3269    1.343596\n3270    0.387023\n3271    0.020386\nName: Chloramines, Length: 2011, dtype: float64\n"}},"pos":37,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"06b5a8","input":"import plotly.express as px\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"Sulfate\", y=\"Conductivity\", trendline=\"ols\")\nfig.show()","output":{"0":{"ename":"ValueError","evalue":"Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species', 'species_id'] but received: Sulfate","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [43]\u001b[0m, in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mplotly\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mexpress\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpx\u001b[39;00m\n\u001b[1;32m      3\u001b[0m df \u001b[38;5;241m=\u001b[39m px\u001b[38;5;241m.\u001b[39mdata\u001b[38;5;241m.\u001b[39miris()\n\u001b[0;32m----> 4\u001b[0m fig \u001b[38;5;241m=\u001b[39m \u001b[43mpx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscatter\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mSulfate\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mConductivity\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrendline\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mols\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      5\u001b[0m fig\u001b[38;5;241m.\u001b[39mshow()\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/express/_chart_types.py:66\u001b[0m, in \u001b[0;36mscatter\u001b[0;34m(data_frame, x, y, color, symbol, size, hover_name, hover_data, custom_data, text, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, orientation, color_discrete_sequence, color_discrete_map, color_continuous_scale, range_color, color_continuous_midpoint, symbol_sequence, symbol_map, opacity, size_max, marginal_x, marginal_y, trendline, trendline_options, trendline_color_override, trendline_scope, log_x, log_y, range_x, range_y, render_mode, title, template, width, height)\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mscatter\u001b[39m(\n\u001b[1;32m     13\u001b[0m     data_frame\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m     14\u001b[0m     x\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     60\u001b[0m     height\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m     61\u001b[0m ):\n\u001b[1;32m     62\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m     63\u001b[0m \u001b[38;5;124;03m    In a scatter plot, each row of `data_frame` is represented by a symbol\u001b[39;00m\n\u001b[1;32m     64\u001b[0m \u001b[38;5;124;03m    mark in 2D space.\u001b[39;00m\n\u001b[1;32m     65\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m---> 66\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mmake_figure\u001b[49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlocals\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconstructor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgo\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mScatter\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/express/_core.py:1945\u001b[0m, in \u001b[0;36mmake_figure\u001b[0;34m(args, constructor, trace_patch, layout_patch)\u001b[0m\n\u001b[1;32m   1942\u001b[0m layout_patch \u001b[38;5;241m=\u001b[39m layout_patch \u001b[38;5;129;01mor\u001b[39;00m {}\n\u001b[1;32m   1943\u001b[0m apply_default_cascade(args)\n\u001b[0;32m-> 1945\u001b[0m args \u001b[38;5;241m=\u001b[39m \u001b[43mbuild_dataframe\u001b[49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconstructor\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1946\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m constructor \u001b[38;5;129;01min\u001b[39;00m [go\u001b[38;5;241m.\u001b[39mTreemap, go\u001b[38;5;241m.\u001b[39mSunburst, go\u001b[38;5;241m.\u001b[39mIcicle] \u001b[38;5;129;01mand\u001b[39;00m args[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpath\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   1947\u001b[0m     args \u001b[38;5;241m=\u001b[39m process_dataframe_hierarchy(args)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/express/_core.py:1405\u001b[0m, in \u001b[0;36mbuild_dataframe\u001b[0;34m(args, constructor)\u001b[0m\n\u001b[1;32m   1402\u001b[0m     args[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcolor\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1403\u001b[0m \u001b[38;5;66;03m# now that things have been prepped, we do the systematic rewriting of `args`\u001b[39;00m\n\u001b[0;32m-> 1405\u001b[0m df_output, wide_id_vars \u001b[38;5;241m=\u001b[39m \u001b[43mprocess_args_into_dataframe\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1406\u001b[0m \u001b[43m    \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mwide_mode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvar_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue_name\u001b[49m\n\u001b[1;32m   1407\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1409\u001b[0m \u001b[38;5;66;03m# now that `df_output` exists and `args` contains only references, we complete\u001b[39;00m\n\u001b[1;32m   1410\u001b[0m \u001b[38;5;66;03m# the special-case and wide-mode handling by further rewriting args and/or mutating\u001b[39;00m\n\u001b[1;32m   1411\u001b[0m \u001b[38;5;66;03m# df_output\u001b[39;00m\n\u001b[1;32m   1413\u001b[0m count_name \u001b[38;5;241m=\u001b[39m _escape_col_name(df_output, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcount\u001b[39m\u001b[38;5;124m\"\u001b[39m, [var_name, value_name])\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/express/_core.py:1207\u001b[0m, in \u001b[0;36mprocess_args_into_dataframe\u001b[0;34m(args, wide_mode, var_name, value_name)\u001b[0m\n\u001b[1;32m   1205\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m argument \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mindex\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m   1206\u001b[0m             err_msg \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m To use the index, pass it in directly as `df.index`.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m-> 1207\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(err_msg)\n\u001b[1;32m   1208\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m length \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(df_input[argument]) \u001b[38;5;241m!=\u001b[39m length:\n\u001b[1;32m   1209\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   1210\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAll arguments should have the same length. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1211\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThe length of column argument `df[\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m]` is \u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m, whereas the \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1218\u001b[0m         )\n\u001b[1;32m   1219\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species', 'species_id'] but received: Sulfate"]}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"7efc26","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\ndummies = pd.get_dummies(data[\"Potability\"])\ndummies","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3267</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3268</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3269</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3270</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3271</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>2011 rows × 2 columns</p>\n</div>","text/plain":"      0  1\n3     1  0\n4     1  0\n5     1  0\n6     1  0\n7     1  0\n...  .. ..\n3267  0  1\n3268  0  1\n3269  0  1\n3270  0  1\n3271  0  1\n\n[2011 rows x 2 columns]"},"exec_count":44,"output_type":"execute_result"}},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"a71baf","input":"data[\"Potability\"] = dummies[0]","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"f2f764","input":"","output":{"0":{"data":{"text/plain":"<seaborn.axisgrid.PairGrid at 0x7f7f544f54c0>"},"exec_count":5,"output_type":"execute_result"},"1":{"data":{"image/png":"7c5d26f437d0aec20849207d54101b149a890b6c","text/plain":"<Figure size 1694.6x1620 with 90 Axes>"},"exec_count":5,"output_type":"execute_result"}},"pos":54,"type":"cell"}
{"cell_type":"code","exec_count":50,"id":"b192d0","input":"data.dropna().shape","output":{"0":{"data":{"text/plain":"(2011, 10)"},"exec_count":50,"output_type":"execute_result"}},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"6b3c3e","input":"corrMatrix = data.corr() #creates a correlation matrix (pandas)\nplt.subplots(figsize=(15,10))\nsns.heatmap(corrMatrix, annot=True)\nplt.show()","output":{"0":{"data":{"image/png":"3ba3f26beb2c6297e023a5e3faf732536172b5f3","text/plain":"<Figure size 1080x720 with 2 Axes>"},"exec_count":6,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":8,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":60,"id":"9f04ad","input":"import plotly.express as px\ndf = data\n\nfig = px.pie(df, values='Sulfate', names='ph', title='Apple Pie', color = \"Sulfate\")\nfig.show()","output":{"0":{"data":{"iframe":"78811af419f0920daf8c9840f8c0b1dc7e365301"},"exec_count":60,"output_type":"execute_result"}},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":61,"id":"06c1d3","input":"outcome = data[\"Potability\"]\noutcome.head()","output":{"0":{"data":{"text/plain":"3    1\n4    1\n5    1\n6    1\n7    1\nName: Potability, dtype: uint8"},"exec_count":61,"output_type":"execute_result"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":69,"id":"df65b4","input":"from sklearn.metrics import confusion_matrix\n\nKNN_model_2 = KNN(n_neighbors = 13)\nKNN_model_2.fit(x_train, y_train)\ny_hat = KNN_model_2.predict(x_test)\nmean_squared_error = (np.sum((y_test - y_hat)**2))/len(y_test)\nprint(mean_squared_error)\nprint(KNN_model_2.score(x_test,y_test)) #knn model --> very inaccurate\nsns.heatmap(confusion_matrix(y_test, y_hat), annot = True, fmt ='g')","output":{"0":{"name":"stdout","output_type":"stream","text":"0.42147117296222664\n0.5785288270377733\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":69,"output_type":"execute_result"},"2":{"data":{"image/png":"160c1493fed03efc1e911254dc588cac4c8bd1d0","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":69,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"30fa9b","input":"fig = px.bar(data, x='Conductivity', y='Trihalomethanes')\nfig.show()","output":{"0":{"data":{"iframe":"6dc14ddafb592a7adea912480acb8ea6ea5ae226"},"exec_count":7,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"c9c456","input":"px.scatter_3d(x = data[\"Sulfate\"],y = data[\"Potability\"], z = data[\"Conductivity\"], color = data[\"ph\"])","output":{"0":{"data":{"iframe":"4e74ab738785568a0b5a18c5acacb0fb446ebbf7"},"exec_count":7,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":71,"id":"65bf97","input":"fig = px.scatter_matrix(data, dimensions=[\"ph\", \"Hardness\", \"Solids\", \"Chloramines\", \"Sulfate\"], color=\"Potability\")\nfig.show()","output":{"0":{"data":{"iframe":"a06f925e774db21ea75da0cb314fd4d832a0cfd7"},"exec_count":71,"output_type":"execute_result"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":80,"id":"ef9b4a","input":"from sklearn.tree import DecisionTreeClassifier\n\nparameters = {\n    \"criterion\": [\"gini\", \"entropy\", \"log_loss\"],\n    \"splitter\": [\"best\", \"random\"]\n}\ndtc = GridSearchCV(DecisionTreeClassifier(), param_grid = parameters)\ndtc.fit(x_train, y_train)\ndtc.best_params_","output":{"0":{"data":{"text/plain":"{'criterion': 'gini', 'splitter': 'best'}"},"exec_count":80,"output_type":"execute_result"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":82,"id":"99f6c0","input":"from sklearn.neural_network import MLPClassifier\nmlp = MLPClassifier(solver='lbfgs', alpha=1e-5, max_iter = 100000, hidden_layer_sizes=(5, 2), random_state=None).fit(x_train,y_train)\ny_hat_mlp = mlp.predict(x_test)\nmean_squared_error2 = (np.sum((y_test - y_hat_mlp)**2))/len(y_test)\nprint(mean_squared_error2)\nprint(mlp.score(x_test,y_test))\nsns.heatmap(confusion_matrix(y_test, y_hat_mlp), annot = True, fmt ='g')","output":{"0":{"name":"stdout","output_type":"stream","text":"0.415506958250497\n0.584493041749503\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":82,"output_type":"execute_result"},"2":{"data":{"image/png":"7d4aab91842d97f2a24d7e0c26d6907302e0ef48","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":82,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":44,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":83,"id":"3736b4","input":"dtc2 = DecisionTreeClassifier().fit(x_train,y_train)\ny_hat_dtc = dtc2.predict(x_test)\nmean_squared_error = (np.sum((y_test - y_hat_dtc)**2))/len(y_test)\nprint(mean_squared_error)\nprint(dtc.score(x_test,y_test))\nsns.heatmap(confusion_matrix(y_test, y_hat_dtc), annot = True, fmt ='g')","output":{"0":{"name":"stdout","output_type":"stream","text":"0.3956262425447316\n0.6043737574552683\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":83,"output_type":"execute_result"},"2":{"data":{"image/png":"fac2b0c497202bcb2a702569579d15d5e9a522f2","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":83,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":52,"type":"cell"}
{"cell_type":"code","exec_count":84,"id":"e9a61e","input":"fig = px.histogram(data, x=\"Chloramines\", y=\"Turbidity\", color=\"Potability\", )\nfig.show()","output":{"0":{"data":{"iframe":"8baa9a20f7a9ddf7bb8235631579886fda161cc5"},"exec_count":84,"output_type":"execute_result"}},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"6d97c4","input":"data.head(10)\n\n\n# potability = is the water safe to drink?\n\n#data.shape","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ph</th>\n      <th>Hardness</th>\n      <th>Solids</th>\n      <th>Chloramines</th>\n      <th>Sulfate</th>\n      <th>Conductivity</th>\n      <th>Organic_carbon</th>\n      <th>Trihalomethanes</th>\n      <th>Turbidity</th>\n      <th>Potability</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>204.890455</td>\n      <td>20791.318981</td>\n      <td>7.300212</td>\n      <td>368.516441</td>\n      <td>564.308654</td>\n      <td>10.379783</td>\n      <td>86.990970</td>\n      <td>2.963135</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.716080</td>\n      <td>129.422921</td>\n      <td>18630.057858</td>\n      <td>6.635246</td>\n      <td>NaN</td>\n      <td>592.885359</td>\n      <td>15.180013</td>\n      <td>56.329076</td>\n      <td>4.500656</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.099124</td>\n      <td>224.236259</td>\n      <td>19909.541732</td>\n      <td>9.275884</td>\n      <td>NaN</td>\n      <td>418.606213</td>\n      <td>16.868637</td>\n      <td>66.420093</td>\n      <td>3.055934</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.316766</td>\n      <td>214.373394</td>\n      <td>22018.417441</td>\n      <td>8.059332</td>\n      <td>356.886136</td>\n      <td>363.266516</td>\n      <td>18.436524</td>\n      <td>100.341674</td>\n      <td>4.628771</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9.092223</td>\n      <td>181.101509</td>\n      <td>17978.986339</td>\n      <td>6.546600</td>\n      <td>310.135738</td>\n      <td>398.410813</td>\n      <td>11.558279</td>\n      <td>31.997993</td>\n      <td>4.075075</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5.584087</td>\n      <td>188.313324</td>\n      <td>28748.687739</td>\n      <td>7.544869</td>\n      <td>326.678363</td>\n      <td>280.467916</td>\n      <td>8.399735</td>\n      <td>54.917862</td>\n      <td>2.559708</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>10.223862</td>\n      <td>248.071735</td>\n      <td>28749.716544</td>\n      <td>7.513408</td>\n      <td>393.663396</td>\n      <td>283.651634</td>\n      <td>13.789695</td>\n      <td>84.603556</td>\n      <td>2.672989</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8.635849</td>\n      <td>203.361523</td>\n      <td>13672.091764</td>\n      <td>4.563009</td>\n      <td>303.309771</td>\n      <td>474.607645</td>\n      <td>12.363817</td>\n      <td>62.798309</td>\n      <td>4.401425</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>NaN</td>\n      <td>118.988579</td>\n      <td>14285.583854</td>\n      <td>7.804174</td>\n      <td>268.646941</td>\n      <td>389.375566</td>\n      <td>12.706049</td>\n      <td>53.928846</td>\n      <td>3.595017</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>11.180284</td>\n      <td>227.231469</td>\n      <td>25484.508491</td>\n      <td>9.077200</td>\n      <td>404.041635</td>\n      <td>563.885481</td>\n      <td>17.927806</td>\n      <td>71.976601</td>\n      <td>4.370562</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          ph    Hardness        Solids  Chloramines     Sulfate  Conductivity  \\\n0        NaN  204.890455  20791.318981     7.300212  368.516441    564.308654   \n1   3.716080  129.422921  18630.057858     6.635246         NaN    592.885359   \n2   8.099124  224.236259  19909.541732     9.275884         NaN    418.606213   \n3   8.316766  214.373394  22018.417441     8.059332  356.886136    363.266516   \n4   9.092223  181.101509  17978.986339     6.546600  310.135738    398.410813   \n5   5.584087  188.313324  28748.687739     7.544869  326.678363    280.467916   \n6  10.223862  248.071735  28749.716544     7.513408  393.663396    283.651634   \n7   8.635849  203.361523  13672.091764     4.563009  303.309771    474.607645   \n8        NaN  118.988579  14285.583854     7.804174  268.646941    389.375566   \n9  11.180284  227.231469  25484.508491     9.077200  404.041635    563.885481   \n\n   Organic_carbon  Trihalomethanes  Turbidity  Potability  \n0       10.379783        86.990970   2.963135           0  \n1       15.180013        56.329076   4.500656           0  \n2       16.868637        66.420093   3.055934           0  \n3       18.436524       100.341674   4.628771           0  \n4       11.558279        31.997993   4.075075           0  \n5        8.399735        54.917862   2.559708           0  \n6       13.789695        84.603556   2.672989           0  \n7       12.363817        62.798309   4.401425           0  \n8       12.706049        53.928846   3.595017           0  \n9       17.927806        71.976601   4.370562           0  "},"exec_count":9,"output_type":"execute_result"}},"pos":3,"scrolled":true,"type":"cell"}
{"cell_type":"markdown","id":"4fbaae","input":"I think that we should keep this graph because it compares  all of the columns with each other to determine what conditions are causing the water to be more potable or less potable. This helps to know which conditions are most at cause of making water more or less potable with others.\n\n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"6213fd","input":"# <u>**Graphs to keep:**</u>\n\n- In\\[33\\]\n- In\\[6\\]\n\n","pos":6,"type":"cell"}
{"id":0,"time":1657824636526,"type":"user"}
{"last_load":1657818079123,"type":"file"}