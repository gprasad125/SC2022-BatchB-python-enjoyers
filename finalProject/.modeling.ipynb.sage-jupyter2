{"backend_state":"running","connection_file":"/projects/183af3d5-8548-4a20-9a82-38842b87480b/.local/share/jupyter/runtime/kernel-76846426-4336-4559-a002-2de3aec816d3.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657304445187,"exec_count":1,"id":"ca744f","input":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\ndata = pd.read_csv(\"./Data/water_potability.csv\")\ndata.dropna(axis=0, inplace = True)\n# what else do we need?","kernel":"ds_env","pos":0,"start":1657304443551,"state":"done","type":"cell"}
{"cell_type":"code","end":1657304445237,"exec_count":2,"id":"e10ce3","input":"target = data[\"Potability\"]\nfeatures = data.drop(columns = [\"Potability\"], axis = 1)\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.25)","kernel":"ds_env","pos":1,"start":1657304445200,"state":"done","type":"cell"}
{"cell_type":"code","end":1657304445291,"exec_count":3,"id":"f9772c","input":"print(target.shape[0])\nprint(features.shape[0])","kernel":"ds_env","output":{"0":{"name":"stdout","text":"2011\n2011\n"}},"pos":2,"start":1657304445275,"state":"done","type":"cell"}
{"cell_type":"code","end":1657304446645,"exec_count":4,"id":"ce13c1","input":"from sklearn.neighbors import KNeighborsClassifier as KNN\nfrom sklearn.model_selection import GridSearchCV\nparameters = {\n    \"n_neighbors\": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n}\n\nmy_KNN_model = GridSearchCV(KNN(), param_grid = parameters)\nmy_KNN_model.fit(x_train, y_train)\nmy_KNN_model.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'n_neighbors': 10}"},"exec_count":4}},"pos":3,"start":1657304445311,"state":"done","type":"cell"}
{"cell_type":"code","end":1657304446919,"exec_count":5,"id":"8a67d3","input":"KNN_model_2 = KNN(n_neighbors = 12)\nKNN_model_2.fit(x_train, y_train)\nfrom sklearn.metrics import f1_score\n\n\ny_hat = KNN_model_2.predict(x_test)\nmean_squared_error = (np.sum((y_test - y_hat)**2))/len(y_test)\nprint(mean_squared_error)\nprint(KNN_model_2.score(x_test,y_test))\nsns.heatmap(confusion_matrix(y_test, y_hat), annot = True, fmt ='g')\nscore = f1_score(y_test, y_hat, average='binary')\nprint(score)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.40556660039761433\n0.5944333996023857\n0.27142857142857146\n"},"1":{"data":{"image/png":"d797d915fc1a85f57cae83242fad69d1b37b487d","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":4,"start":1657304446653,"state":"done","type":"cell"}
{"cell_type":"code","end":1657304543797,"id":"e5ba2e","input":"Y_pred = model.predict(X_test)\nprint(\"Accuracy:\", metrics.accuracy_score(Y_test, Y_pred))\nprint(\"Precision:\", metrics.precision_score(Y_test, Y_pred))\nprint(\"Recall:\", metrics.recall_score(Y_test, Y_pred))\nprint(\"Mean-Squared-Error:\", mean_squared_error)","kernel":"ds_env","pos":12,"start":1657304543797,"state":"done","type":"cell"}
{"cell_type":"code","end":1657304615075,"exec_count":16,"id":"9111b5","input":"from pandas import read_csv\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.svm import SVC","kernel":"ds_env","pos":8,"start":1657304615033,"state":"done","type":"cell"}
{"cell_type":"code","end":1657304622539,"exec_count":17,"id":"64f969","input":"\ndata = pd.read_csv(\"./Data/water_potability.csv\")\n\ndata.dropna(axis=0, inplace = True)","kernel":"ds_env","pos":9,"start":1657304622517,"state":"done","type":"cell"}
{"cell_type":"code","end":1657304630095,"exec_count":18,"id":"2a1490","input":"from sklearn.tree import DecisionTreeClassifier\n\ndtc_param = {\n    'max_depth': [1,2,3,4,5,6,7,8,9,10],\n    'max_leaf_nodes': [20,30,40,50,60,70]\n}\n\ndtc_test = GridSearchCV(DecisionTreeClassifier(), param_grid = dtc_param).fit(x_train,y_train)\ndtc_test.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'max_depth': 3, 'max_leaf_nodes': 70}"},"exec_count":18}},"pos":7,"start":1657304626947,"state":"done","type":"cell"}
{"cell_type":"code","end":1657304631887,"exec_count":20,"id":"4e28aa","input":"D = data.values\nx = D[:,0:4]\ny = D[:, 4]\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size = 0.20)","kernel":"ds_env","pos":10,"start":1657304631871,"state":"done","type":"cell"}
{"cell_type":"code","end":1657304638985,"exec_count":21,"id":"377d3c","input":"\nmodel = SVC()\nmodel.fit(X_train, Y_train)\n#mean_squared_error = (np.sum((y_test - y_hat)**2))/len(y_test)","kernel":"ds_env","output":{"0":{"ename":"ValueError","evalue":"Unknown label type: 'continuous'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [21]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m model \u001b[38;5;241m=\u001b[39m SVC()\n\u001b[0;32m----> 2\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mY_train\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py:182\u001b[0m, in \u001b[0;36mBaseLibSVM.fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    172\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    173\u001b[0m     X, y \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_data(\n\u001b[1;32m    174\u001b[0m         X,\n\u001b[1;32m    175\u001b[0m         y,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    179\u001b[0m         accept_large_sparse\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m    180\u001b[0m     )\n\u001b[0;32m--> 182\u001b[0m y \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_targets\u001b[49m\u001b[43m(\u001b[49m\u001b[43my\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    184\u001b[0m sample_weight \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39masarray(\n\u001b[1;32m    185\u001b[0m     [] \u001b[38;5;28;01mif\u001b[39;00m sample_weight \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m sample_weight, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mfloat64\n\u001b[1;32m    186\u001b[0m )\n\u001b[1;32m    187\u001b[0m solver_type \u001b[38;5;241m=\u001b[39m LIBSVM_IMPL\u001b[38;5;241m.\u001b[39mindex(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_impl)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py:735\u001b[0m, in \u001b[0;36mBaseSVC._validate_targets\u001b[0;34m(self, y)\u001b[0m\n\u001b[1;32m    733\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_validate_targets\u001b[39m(\u001b[38;5;28mself\u001b[39m, y):\n\u001b[1;32m    734\u001b[0m     y_ \u001b[38;5;241m=\u001b[39m column_or_1d(y, warn\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m--> 735\u001b[0m     \u001b[43mcheck_classification_targets\u001b[49m\u001b[43m(\u001b[49m\u001b[43my\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    736\u001b[0m     \u001b[38;5;28mcls\u001b[39m, y \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39munique(y_, return_inverse\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m    737\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mclass_weight_ \u001b[38;5;241m=\u001b[39m compute_class_weight(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mclass_weight, classes\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mcls\u001b[39m, y\u001b[38;5;241m=\u001b[39my_)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/multiclass.py:200\u001b[0m, in \u001b[0;36mcheck_classification_targets\u001b[0;34m(y)\u001b[0m\n\u001b[1;32m    192\u001b[0m y_type \u001b[38;5;241m=\u001b[39m type_of_target(y, input_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124my\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    193\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m y_type \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m [\n\u001b[1;32m    194\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbinary\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m    195\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmulticlass\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    198\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmultilabel-sequences\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m    199\u001b[0m ]:\n\u001b[0;32m--> 200\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUnknown label type: \u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m y_type)\n","\u001b[0;31mValueError\u001b[0m: Unknown label type: 'continuous'"]}},"pos":11,"start":1657304638817,"state":"done","type":"cell"}
{"cell_type":"code","end":1657307798797,"exec_count":30,"id":"015332","input":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nrfc_param = {\n    \"n_estimators\": [100,120,140,160,180,200],\n    \"max_features\": [\"log2\", \"sqrt\", None],\n    \"min_samples_split\": [10,20,30,40]\n}\n\nrfc_test = GridSearchCV(RandomForestClassifier(), param_grid = rfc_param).fit(x_train,y_train)\nrfc_test.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'max_features': None, 'min_samples_split': 20, 'n_estimators': 140}"},"exec_count":30}},"pos":5,"start":1657307508724,"state":"done","type":"cell"}
{"cell_type":"code","end":1657307911894,"exec_count":35,"id":"bde8d9","input":"rfc_model = RandomForestClassifier(max_features = None, min_samples_split = 20, n_estimators = 140).fit(x_train,y_train)\ny_hat_rfc = rfc_model.predict(x_test)\nmean_squared_error = (np.sum((y_test - y_hat_rfc)**2))/len(y_test)\nprint(mean_squared_error)\nprint(rfc_model.score(x_test,y_test))\nprint(classification_report(y_test, y_hat_rfc))\nsns.heatmap(confusion_matrix(y_test, y_hat_rfc), annot = True, fmt ='g')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.30417495029821073\n0.6958250497017893\n              precision    recall  f1-score   support\n\n           0       0.72      0.83      0.77       309\n           1       0.64      0.47      0.55       194\n\n    accuracy                           0.70       503\n   macro avg       0.68      0.65      0.66       503\nweighted avg       0.69      0.70      0.68       503\n\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":35},"2":{"data":{"image/png":"4a1912388fdf0580500364ff28d20aa76a083af3","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":6,"start":1657307909449,"state":"done","type":"cell"}
{"cell_type":"code","id":"0fe529","input":"","pos":13,"type":"cell"}
{"end":1657304772322,"exec_count":23,"id":"70d682","input":"from sklearn.metrics import classification_report\n\ndtc_model = DecisionTreeClassifier(max_depth = 3, max_leaf_nodes = 70).fit(x_train,y_train)\ny_hat_dtc = dtc_model.predict(x_test)\nmean_squared_error = (np.sum((y_test - y_hat_dtc)**2))/len(y_test)\nprint(mean_squared_error)\nprint(dtc_model.score(x_test,y_test))\nprint(classification_report(y_test, y_hat_dtc))\nsns.heatmap(confusion_matrix(y_test, y_hat_dtc), annot = True, fmt ='g')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.34393638170974156\n0.6560636182902585\n              precision    recall  f1-score   support\n\n           0       0.67      0.86      0.76       309\n           1       0.60      0.32      0.42       194\n\n    accuracy                           0.66       503\n   macro avg       0.64      0.59      0.59       503\nweighted avg       0.64      0.66      0.63       503\n\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":23},"2":{"data":{"image/png":"932d29e744ee83198f871abecfba49c95a2ceaa0","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":7.5,"scrolled":true,"start":1657304771894,"state":"done","type":"cell"}
{"end":1657305785390,"exec_count":28,"id":"892db1","input":"# classification_report(y_test, y_hat_dtc, output_dict = True)\nprint(data[data[\"Potability\"] == 0].shape[0])\nprint(data[data[\"Potability\"] == 1].shape[0])","kernel":"ds_env","output":{"0":{"name":"stdout","text":"1200\n811\n"}},"pos":7.75,"start":1657305785370,"state":"done","type":"cell"}
{"id":"4b2175","input":"","pos":5.5,"type":"cell"}
{"id":0,"time":1657311788295,"type":"user"}
{"last_load":1657304372772,"type":"file"}