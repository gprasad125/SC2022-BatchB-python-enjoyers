{"backend_state":"running","connection_file":"/projects/183af3d5-8548-4a20-9a82-38842b87480b/.local/share/jupyter/runtime/kernel-52912a77-00fb-4fa8-b286-f48a0a652d09.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","trust":true,"type":"settings"}
{"end":1657228452309,"exec_count":1,"id":"ca744f","input":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\ndata = pd.read_csv(\"./Data/water_potability.csv\")\ndata.dropna(axis=0, inplace = True)\n# what else do we need?","kernel":"ds_env","pos":0,"start":1657228450762,"state":"done","type":"cell"}
{"end":1657228452327,"exec_count":2,"id":"e10ce3","input":"target = data[\"Potability\"]\nfeatures = data.drop(columns = [\"Potability\"], axis = 1)\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.25)","kernel":"ds_env","pos":1,"start":1657228452316,"state":"done","type":"cell"}
{"end":1657228453600,"exec_count":3,"id":"ce13c1","input":"import sklearn\nfrom sklearn.neighbors import KNeighborsClassifier as KNN\nfrom sklearn.model_selection import GridSearchCV\nparameters = {\n    \"n_neighbors\": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n}\n\nmy_KNN_model = GridSearchCV(KNN(), param_grid = parameters)\n#my_KNN_model = KNN(n_neighbors=k)\nmy_KNN_model.fit(x_train, y_train)\nmy_KNN_model.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'n_neighbors': 18}"},"exec_count":3}},"pos":3,"start":1657228452339,"state":"done","type":"cell"}
{"end":1657228454024,"exec_count":4,"id":"8a67d3","input":"from sklearn.metrics import confusion_matrix\n\nKNN_model_2 = KNN(n_neighbors = 10)\nKNN_model_2.fit(x_train, y_train)\ny_hat = KNN_model_2.predict(x_test)\nmean_squared_error = (np.sum((y_test - y_hat)**2))/len(y_test)\nprint(mean_squared_error)\nprint(KNN_model_2.score(x_test,y_test)) #knn model --> very inaccurate\nsns.heatmap(confusion_matrix(y_test, y_hat), annot = True, fmt ='g')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.4135188866799205\n0.5864811133200796\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":4},"2":{"data":{"image/png":"09bc8b7065f91b36c3d1b63139510ba91ee7f12a","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":4,"start":1657228453606,"state":"done","type":"cell"}
{"end":1657228547317,"exec_count":5,"id":"015332","input":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nrfc_param = {\n    \"n_estimators\": [80,100,120,140,160,180,200,220],\n    \"criterion\": [\"gini\", \"entropy\", \"log_loss\"]\n}\n\nrfc_test = GridSearchCV(RandomForestClassifier(), param_grid = rfc_param).fit(x_train,y_train)\nrfc_test.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'criterion': 'gini', 'n_estimators': 200}"},"exec_count":5}},"pos":5,"start":1657228454035,"state":"done","type":"cell"}
{"end":1657228559384,"exec_count":8,"id":"bde8d9","input":"rfc_model = RandomForestClassifier(n_estimators = 200, criterion = \"gini\").fit(x_train,y_train)\ny_hat_rfc = rfc_model.predict(x_test)\nmean_squared_error = (np.sum((y_test - y_hat_rfc)**2))/len(y_test)\nprint(mean_squared_error)\nprint(rfc_model.score(x_test,y_test))\nsns.heatmap(confusion_matrix(y_test, y_hat_rfc), annot = True, fmt ='g')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.34592445328031807\n0.6540755467196819\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":8},"2":{"data":{"image/png":"da8a8368c7b157e5eee0e7e9b96d45d336940b09","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":6,"start":1657228556774,"state":"done","type":"cell"}
{"end":1657228936705,"exec_count":22,"id":"64f969","input":"from sklearn import datasets\ncancer = datasets.load_breast_cancer()\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(cancer.data, cancer.target, test_size = 0.3, random_state = 109)","kernel":"ds_env","pos":11,"start":1657228936694,"state":"done","type":"cell"}
{"end":1657228959427,"exec_count":25,"id":"377d3c","input":"from sklearn import svm\nclf = svm.SVC(kernel = 'linear')\nclf.fit(X_train, Y_train)\nY_pred = clf.predict(X_test)","kernel":"ds_env","pos":13,"start":1657228957349,"state":"done","type":"cell"}
{"end":1657228959447,"exec_count":26,"id":"e5ba2e","input":"from sklearn import metrics\nprint(\"Accuracy:\", metrics.accuracy_score(Y_test, Y_pred))\nprint(\"Precision:\", metrics.precision_score(Y_test, Y_pred))\nprint(\"Recall:\", metrics.recall_score(Y_test, Y_pred))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Accuracy: 0.9649122807017544\nPrecision: 0.9811320754716981\nRecall: 0.9629629629629629\n"}},"pos":14,"start":1657228959433,"state":"done","type":"cell"}
{"end":1657229264395,"exec_count":31,"id":"335d39","input":"from sklearn.svm import SVC\nsvc_param ={\n    \"kernel\": [\"linear\", \"poly\", \"rbf\", \"sigmoid\", \"precomputed\"]\n}\n\nsvc_test = GridSearchCV(SVC(),param_grid = svc_param).fit(x_train,y_train)\nsvc_test.best_params_","kernel":"ds_env","output":{"0":{"ename":"ValueError","evalue":"Found input variables with inconsistent numbers of samples: [1508, 398]","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [31]\u001b[0m, in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01msvm\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m SVC\n\u001b[1;32m      2\u001b[0m svc_param \u001b[38;5;241m=\u001b[39m{\n\u001b[1;32m      3\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mkernel\u001b[39m\u001b[38;5;124m\"\u001b[39m: [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlinear\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpoly\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mrbf\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msigmoid\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mprecomputed\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m      4\u001b[0m }\n\u001b[0;32m----> 6\u001b[0m svc_test \u001b[38;5;241m=\u001b[39m \u001b[43mGridSearchCV\u001b[49m\u001b[43m(\u001b[49m\u001b[43mSVC\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43mparam_grid\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[43msvc_param\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      7\u001b[0m svc_test\u001b[38;5;241m.\u001b[39mbest_params_\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_search.py:783\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    780\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_refit_for_multimetric(scorers)\n\u001b[1;32m    781\u001b[0m     refit_metric \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrefit\n\u001b[0;32m--> 783\u001b[0m X, y, groups \u001b[38;5;241m=\u001b[39m \u001b[43mindexable\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgroups\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    784\u001b[0m fit_params \u001b[38;5;241m=\u001b[39m _check_fit_params(X, fit_params)\n\u001b[1;32m    786\u001b[0m cv_orig \u001b[38;5;241m=\u001b[39m check_cv(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcv, y, classifier\u001b[38;5;241m=\u001b[39mis_classifier(estimator))\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/validation.py:433\u001b[0m, in \u001b[0;36mindexable\u001b[0;34m(*iterables)\u001b[0m\n\u001b[1;32m    414\u001b[0m \u001b[38;5;124;03m\"\"\"Make arrays indexable for cross-validation.\u001b[39;00m\n\u001b[1;32m    415\u001b[0m \n\u001b[1;32m    416\u001b[0m \u001b[38;5;124;03mChecks consistent length, passes through None, and ensures that everything\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    429\u001b[0m \u001b[38;5;124;03m    sparse matrix, or dataframe) or `None`.\u001b[39;00m\n\u001b[1;32m    430\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    432\u001b[0m result \u001b[38;5;241m=\u001b[39m [_make_indexable(X) \u001b[38;5;28;01mfor\u001b[39;00m X \u001b[38;5;129;01min\u001b[39;00m iterables]\n\u001b[0;32m--> 433\u001b[0m \u001b[43mcheck_consistent_length\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mresult\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    434\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/validation.py:387\u001b[0m, in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    385\u001b[0m uniques \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39munique(lengths)\n\u001b[1;32m    386\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(uniques) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m--> 387\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    388\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFound input variables with inconsistent numbers of samples: \u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    389\u001b[0m         \u001b[38;5;241m%\u001b[39m [\u001b[38;5;28mint\u001b[39m(l) \u001b[38;5;28;01mfor\u001b[39;00m l \u001b[38;5;129;01min\u001b[39;00m lengths]\n\u001b[1;32m    390\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [1508, 398]"]}},"pos":8,"start":1657229264357,"state":"done","type":"cell"}
{"end":1657229514260,"exec_count":34,"id":"f9772c","input":"print(target.shape[0])\nprint(features.shape[0])","kernel":"ds_env","output":{"0":{"name":"stdout","text":"2011\n2011\n"}},"pos":2,"start":1657229514248,"state":"done","type":"cell"}
{"exec_count":7,"id":"8ca1d3","input":"from sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n\nx,y = load_iris(return x,y = True)\n\n#x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.25, random_state = 0)\n\ngnb = GaussianNB()\n\ny_pred = gnb.fit(x_train, y_train).predict(x_test)\n\nprint(\"Number of mislabeled points out of a total %d points : %d\")","kernel":"ds_env","output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (1368406186.py, line 5)","traceback":["\u001b[0;36m  Input \u001b[0;32mIn [7]\u001b[0;36m\u001b[0m\n\u001b[0;31m    x,y = load_iris(return x,y = True)\u001b[0m\n\u001b[0m                    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"pos":7,"state":"done","type":"cell"}
{"id":"0fe529","input":"","pos":15,"type":"cell"}
{"id":"2a1490","input":"","pos":9,"type":"cell"}
{"id":"4e28aa","input":"","pos":12,"type":"cell"}
{"id":"9111b5","input":"","kernel":"ds_env","pos":10,"type":"cell"}
{"id":0,"time":1657227978876,"type":"user"}
{"last_load":1657214739240,"type":"file"}