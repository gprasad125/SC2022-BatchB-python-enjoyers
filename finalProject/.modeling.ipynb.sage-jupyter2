{"backend_state":"running","connection_file":"/projects/183af3d5-8548-4a20-9a82-38842b87480b/.local/share/jupyter/runtime/kernel-4127aab6-b9c5-4352-802f-cbb946072f28.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657573094268,"exec_count":3,"id":"f9772c","input":"print(target.shape[0])\nprint(features.shape[0])","kernel":"ds_env","output":{"0":{"name":"stdout","text":"811\n811\n"}},"pos":2,"scrolled":true,"start":1657573094260,"state":"done","type":"cell"}
{"cell_type":"code","end":1657573095111,"exec_count":4,"id":"ce13c1","input":"from sklearn.neighbors import KNeighborsClassifier as KNN\nfrom sklearn.model_selection import GridSearchCV\nparameters = {\n    \"n_neighbors\": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n}\n\nmy_KNN_model = GridSearchCV(KNN(), param_grid = parameters)\nmy_KNN_model.fit(x_train, y_train)\nmy_KNN_model.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'n_neighbors': 1}"},"exec_count":4}},"pos":3,"start":1657573094298,"state":"done","type":"cell"}
{"cell_type":"code","end":1657573165830,"exec_count":6,"id":"015332","input":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nrfc_param = {\n    \"n_estimators\": [100,120,140,160,180,200],\n    \"max_features\": [\"log2\", \"sqrt\", None],\n    \"min_samples_split\": [10,20,30,40]\n}\n\nrfc_test = GridSearchCV(RandomForestClassifier(), param_grid = rfc_param).fit(x_train,y_train)\nrfc_test.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'max_features': 'log2', 'min_samples_split': 10, 'n_estimators': 100}"},"exec_count":6}},"pos":5,"start":1657573095365,"state":"done","type":"cell"}
{"cell_type":"code","end":1657573167185,"exec_count":8,"id":"2a1490","input":"from sklearn.tree import DecisionTreeClassifier\n\ndtc_param = {\n    'max_depth': [1,2,3,4,5,6,7,8,9,10],\n    'max_leaf_nodes': [20,30,40,50,60,70]\n}\n\ndtc_test = GridSearchCV(DecisionTreeClassifier(), param_grid = dtc_param).fit(x_train,y_train)\ndtc_test.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'max_depth': 1, 'max_leaf_nodes': 20}"},"exec_count":8}},"pos":8,"start":1657573166212,"state":"done","type":"cell"}
{"cell_type":"code","end":1657573167383,"exec_count":10,"id":"892db1","input":"# classification_report(y_test, y_hat_dtc, output_dict = True)\nprint(data[data[\"Potability\"] == 0].shape[0])\nprint(data[data[\"Potability\"] == 1].shape[0])","kernel":"ds_env","output":{"0":{"name":"stdout","text":"811\n811\n"}},"pos":10,"start":1657573167379,"state":"done","type":"cell"}
{"cell_type":"code","end":1657573167391,"exec_count":11,"id":"9111b5","input":"from pandas import read_csv\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.svm import SVC","kernel":"ds_env","pos":11,"start":1657573167388,"state":"done","type":"cell"}
{"cell_type":"code","end":1657573167438,"exec_count":14,"id":"377d3c","input":"\n# model = SVC()\n# model.fit(X_train, Y_train)\n# #mean_squared_error = (np.sum((y_test - y_hat)**2))/len(y_test)","kernel":"ds_env","pos":14,"start":1657573167432,"state":"done","type":"cell"}
{"cell_type":"code","end":1657573167462,"exec_count":15,"id":"e5ba2e","input":"# Y_pred = model.predict(X_test)\n# print(\"Accuracy:\", metrics.accuracy_score(Y_test, Y_pred))\n# print(\"Precision:\", metrics.precision_score(Y_test, Y_pred))\n# print(\"Recall:\", metrics.recall_score(Y_test, Y_pred))\n# print(\"Mean-Squared-Error:\", mean_squared_error)","kernel":"ds_env","pos":15,"start":1657573167443,"state":"done","type":"cell"}
{"cell_type":"code","end":1657573610576,"exec_count":25,"id":"64f969","input":"data = pd.read_csv(\"./Data/water_potability.csv\")\ndata.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ph</th>\n      <th>Hardness</th>\n      <th>Solids</th>\n      <th>Chloramines</th>\n      <th>Sulfate</th>\n      <th>Conductivity</th>\n      <th>Organic_carbon</th>\n      <th>Trihalomethanes</th>\n      <th>Turbidity</th>\n      <th>Potability</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>204.890455</td>\n      <td>20791.318981</td>\n      <td>7.300212</td>\n      <td>368.516441</td>\n      <td>564.308654</td>\n      <td>10.379783</td>\n      <td>86.990970</td>\n      <td>2.963135</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.716080</td>\n      <td>129.422921</td>\n      <td>18630.057858</td>\n      <td>6.635246</td>\n      <td>NaN</td>\n      <td>592.885359</td>\n      <td>15.180013</td>\n      <td>56.329076</td>\n      <td>4.500656</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.099124</td>\n      <td>224.236259</td>\n      <td>19909.541732</td>\n      <td>9.275884</td>\n      <td>NaN</td>\n      <td>418.606213</td>\n      <td>16.868637</td>\n      <td>66.420093</td>\n      <td>3.055934</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.316766</td>\n      <td>214.373394</td>\n      <td>22018.417441</td>\n      <td>8.059332</td>\n      <td>356.886136</td>\n      <td>363.266516</td>\n      <td>18.436524</td>\n      <td>100.341674</td>\n      <td>4.628771</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9.092223</td>\n      <td>181.101509</td>\n      <td>17978.986339</td>\n      <td>6.546600</td>\n      <td>310.135738</td>\n      <td>398.410813</td>\n      <td>11.558279</td>\n      <td>31.997993</td>\n      <td>4.075075</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         ph    Hardness        Solids  Chloramines     Sulfate  Conductivity  \\\n0       NaN  204.890455  20791.318981     7.300212  368.516441    564.308654   \n1  3.716080  129.422921  18630.057858     6.635246         NaN    592.885359   \n2  8.099124  224.236259  19909.541732     9.275884         NaN    418.606213   \n3  8.316766  214.373394  22018.417441     8.059332  356.886136    363.266516   \n4  9.092223  181.101509  17978.986339     6.546600  310.135738    398.410813   \n\n   Organic_carbon  Trihalomethanes  Turbidity  Potability  \n0       10.379783        86.990970   2.963135           0  \n1       15.180013        56.329076   4.500656           0  \n2       16.868637        66.420093   3.055934           0  \n3       18.436524       100.341674   4.628771           0  \n4       11.558279        31.997993   4.075075           0  "},"exec_count":25}},"pos":12,"start":1657573610511,"state":"done","type":"cell"}
{"cell_type":"code","end":1657573752624,"exec_count":27,"id":"4e28aa","input":"# D = data.values\n# x = D[:,0:4]\n# y = D[:, 4]\n# X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size = 0.20)","kernel":"ds_env","pos":13,"start":1657573752613,"state":"done","type":"cell"}
{"cell_type":"code","end":1657575358729,"exec_count":50,"id":"70d682","input":"\n\ndtc_model = DecisionTreeClassifier(max_depth = 3, max_leaf_nodes = 70).fit(x_train,y_train)\ny_hat_dtc = dtc_model.predict(x_test)\nmean_squared_error = (np.sum((y_test - y_hat_dtc)**2))/len(y_test)\nprint(mean_squared_error)\nprint(dtc_model.score(x_test,y_test))\nprint(classification_report(y_test, y_hat_dtc))\nsns.heatmap(confusion_matrix(y_test, y_hat_dtc), annot = True, fmt ='g')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.0\n1.0\n              precision    recall  f1-score   support\n\n           1       1.00      1.00      1.00       203\n\n    accuracy                           1.00       203\n   macro avg       1.00      1.00      1.00       203\nweighted avg       1.00      1.00      1.00       203\n\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":50},"2":{"data":{"image/png":"dcb29251012b770625288a6b4a01bd058ed69861","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":9,"scrolled":true,"start":1657575358396,"state":"done","type":"cell"}
{"cell_type":"code","end":1657575375125,"exec_count":51,"id":"e10ce3","input":"target = data_equal[\"Potability\"]\nfeatures = data_equal.drop(columns = [\"Potability\"], axis = 1)\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.25)","kernel":"ds_env","pos":1,"start":1657575375114,"state":"done","type":"cell"}
{"cell_type":"code","end":1657575380443,"exec_count":52,"id":"8a67d3","input":"KNN_model_2 = KNN(n_neighbors = 12)\nKNN_model_2.fit(x_train, y_train)\nfrom sklearn.metrics import f1_score\n\n\ny_hat = KNN_model_2.predict(x_test)\nmean_squared_error = (np.sum((y_test - y_hat)**2))/len(y_test)\nprint(mean_squared_error)\nprint(KNN_model_2.score(x_test,y_test))\nsns.heatmap(confusion_matrix(y_test, y_hat), annot = True, fmt ='g')\nscore = f1_score(y_test, y_hat, average='binary')\nprint(score)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.0\n1.0\n1.0\n"},"1":{"data":{"image/png":"dcb29251012b770625288a6b4a01bd058ed69861","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":4,"start":1657575380215,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":20,"id":"ca744f","input":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\ndata = pd.read_csv(\"./Data/water_potability.csv\")\n\n\n'''\ndata.dropna(axis=0, inplace = True)\n\n\nn = abs(data[data[\"Potability\"] == 0].shape[0]- data[data[\"Potability\"] == 1].shape[0])\ndata_filtered = data[data[\"Potability\"]==0];\ndata_filtered2 = data[data[\"Potability\"] == 1]\ndata_filtered = data.drop(index=data_filtered.index[:n], axis=0, inplace=True)\nframes = [data_filtered,data_filtered2]\n\ndata_equal = pd.concat(frames)\n\n'''\n\n\n#try changing data to data_equal for some models --> see if it gets better results -Annya\n\n# Try with imputed data (try with mean, mode (most common value), etc.)\n# GridSearchCV\nprint(data_equal)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"             ph    Hardness        Solids  Chloramines     Sulfate  \\\n250    9.445130  145.805402  13168.529156     9.444471  310.583374   \n251    9.024845  128.096691  19859.676476     8.016423  300.150377   \n253    6.800119  242.008082  39143.403329     9.501695  187.170714   \n254    7.174135  203.408935  20401.102461     7.681806  287.085679   \n255    7.657991  236.960889  14245.789121     6.289065  373.165363   \n...         ...         ...           ...          ...         ...   \n3267   8.989900  215.047358  15921.412018     6.297312  312.931022   \n3268   6.702547  207.321086  17246.920347     7.708117  304.510230   \n3269  11.491011   94.812545  37188.826022     9.263166  258.930600   \n3270   6.069616  186.659040  26138.780191     7.747547  345.700257   \n3271   4.668102  193.681735  47580.991603     7.166639  359.948574   \n\n      Conductivity  Organic_carbon  Trihalomethanes  Turbidity  Potability  \n250     592.659021        8.606397        77.577460   3.875165           1  \n251     451.143481       14.770863        73.778026   3.985251           1  \n253     376.456593       11.432466        73.777275   3.854940           1  \n254     315.549900       14.533510        74.405616   3.939896           1  \n255     416.624189       10.464239        85.852769   2.437296           1  \n...            ...             ...              ...        ...         ...  \n3267    390.410231        9.899115        55.069304   4.613843           1  \n3268    329.266002       16.217303        28.878601   3.442983           1  \n3269    439.893618       16.172755        41.558501   4.369264           1  \n3270    415.886955       12.067620        60.419921   3.669712           1  \n3271    526.424171       13.894419        66.687695   4.435821           1  \n\n[811 rows x 10 columns]\n"}},"pos":0,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"bde8d9","input":"rfc_model = RandomForestClassifier(max_features=None,\n                                   min_samples_split=20,\n                                   n_estimators=140).fit(x_train, y_train)\ny_hat_rfc = rfc_model.predict(x_test)\nmean_squared_error = (np.sum((y_test - y_hat_rfc)**2)) / len(y_test)\nprint(mean_squared_error)\nprint(rfc_model.score(x_test, y_test))\nprint(classification_report(y_test, y_hat_rfc))\nsns.heatmap(confusion_matrix(y_test, y_hat_rfc), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.0\n1.0\n              precision    recall  f1-score   support\n\n           1       1.00      1.00      1.00       203\n\n    accuracy                           1.00       203\n   macro avg       1.00      1.00      1.00       203\nweighted avg       1.00      1.00      1.00       203\n\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":7},"2":{"data":{"image/png":"dcb29251012b770625288a6b4a01bd058ed69861","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":7,"state":"done","type":"cell"}
{"end":1657574723117,"exec_count":36,"id":"52316c","input":"predictions = grid_kn.predict(x_test)","kernel":"ds_env","pos":0.75,"start":1657574723026,"state":"done","type":"cell"}
{"end":1657574780486,"exec_count":41,"id":"6adf69","input":"y_test.value_counts()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"1    203\nName: Potability, dtype: int64"},"exec_count":41}},"pos":0.875,"start":1657574780467,"state":"done","type":"cell"}
{"end":1657575326612,"exec_count":49,"id":"07940b","input":"data.isnull().sum()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"ph                 0\nHardness           0\nSolids             0\nChloramines        0\nSulfate            0\nConductivity       0\nOrganic_carbon     0\nTrihalomethanes    0\nTurbidity          0\nPotability         0\ndtype: int64"},"exec_count":49}},"pos":13.5,"start":1657575326605,"state":"done","type":"cell"}
{"end":1657575844543,"exec_count":66,"id":"d4eeda","input":"# Calculate value to impute with\ndf = data\n\ndf['ph'].fillna(int(df['ph'].mean()), inplace=True)\n\ndf['Sulfate'].fillna(int(df['Sulfate'].mean()), inplace=True)\n\ndf['Trihalomethanes'].fillna(int(df['Trihalomethanes'].mean()), inplace=True)\n\ndata.head(10)\n","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ph</th>\n      <th>Hardness</th>\n      <th>Solids</th>\n      <th>Chloramines</th>\n      <th>Sulfate</th>\n      <th>Conductivity</th>\n      <th>Organic_carbon</th>\n      <th>Trihalomethanes</th>\n      <th>Turbidity</th>\n      <th>Potability</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7.000000</td>\n      <td>204.890455</td>\n      <td>20791.318981</td>\n      <td>7.300212</td>\n      <td>368.516441</td>\n      <td>564.308654</td>\n      <td>10.379783</td>\n      <td>86.990970</td>\n      <td>2.963135</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.716080</td>\n      <td>129.422921</td>\n      <td>18630.057858</td>\n      <td>6.635246</td>\n      <td>333.000000</td>\n      <td>592.885359</td>\n      <td>15.180013</td>\n      <td>56.329076</td>\n      <td>4.500656</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.099124</td>\n      <td>224.236259</td>\n      <td>19909.541732</td>\n      <td>9.275884</td>\n      <td>333.000000</td>\n      <td>418.606213</td>\n      <td>16.868637</td>\n      <td>66.420093</td>\n      <td>3.055934</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.316766</td>\n      <td>214.373394</td>\n      <td>22018.417441</td>\n      <td>8.059332</td>\n      <td>356.886136</td>\n      <td>363.266516</td>\n      <td>18.436524</td>\n      <td>100.341674</td>\n      <td>4.628771</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9.092223</td>\n      <td>181.101509</td>\n      <td>17978.986339</td>\n      <td>6.546600</td>\n      <td>310.135738</td>\n      <td>398.410813</td>\n      <td>11.558279</td>\n      <td>31.997993</td>\n      <td>4.075075</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5.584087</td>\n      <td>188.313324</td>\n      <td>28748.687739</td>\n      <td>7.544869</td>\n      <td>326.678363</td>\n      <td>280.467916</td>\n      <td>8.399735</td>\n      <td>54.917862</td>\n      <td>2.559708</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>10.223862</td>\n      <td>248.071735</td>\n      <td>28749.716544</td>\n      <td>7.513408</td>\n      <td>393.663396</td>\n      <td>283.651634</td>\n      <td>13.789695</td>\n      <td>84.603556</td>\n      <td>2.672989</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8.635849</td>\n      <td>203.361523</td>\n      <td>13672.091764</td>\n      <td>4.563009</td>\n      <td>303.309771</td>\n      <td>474.607645</td>\n      <td>12.363817</td>\n      <td>62.798309</td>\n      <td>4.401425</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>7.000000</td>\n      <td>118.988579</td>\n      <td>14285.583854</td>\n      <td>7.804174</td>\n      <td>268.646941</td>\n      <td>389.375566</td>\n      <td>12.706049</td>\n      <td>53.928846</td>\n      <td>3.595017</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>11.180284</td>\n      <td>227.231469</td>\n      <td>25484.508491</td>\n      <td>9.077200</td>\n      <td>404.041635</td>\n      <td>563.885481</td>\n      <td>17.927806</td>\n      <td>71.976601</td>\n      <td>4.370562</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          ph    Hardness        Solids  Chloramines     Sulfate  Conductivity  \\\n0   7.000000  204.890455  20791.318981     7.300212  368.516441    564.308654   \n1   3.716080  129.422921  18630.057858     6.635246  333.000000    592.885359   \n2   8.099124  224.236259  19909.541732     9.275884  333.000000    418.606213   \n3   8.316766  214.373394  22018.417441     8.059332  356.886136    363.266516   \n4   9.092223  181.101509  17978.986339     6.546600  310.135738    398.410813   \n5   5.584087  188.313324  28748.687739     7.544869  326.678363    280.467916   \n6  10.223862  248.071735  28749.716544     7.513408  393.663396    283.651634   \n7   8.635849  203.361523  13672.091764     4.563009  303.309771    474.607645   \n8   7.000000  118.988579  14285.583854     7.804174  268.646941    389.375566   \n9  11.180284  227.231469  25484.508491     9.077200  404.041635    563.885481   \n\n   Organic_carbon  Trihalomethanes  Turbidity  Potability  \n0       10.379783        86.990970   2.963135           0  \n1       15.180013        56.329076   4.500656           0  \n2       16.868637        66.420093   3.055934           0  \n3       18.436524       100.341674   4.628771           0  \n4       11.558279        31.997993   4.075075           0  \n5        8.399735        54.917862   2.559708           0  \n6       13.789695        84.603556   2.672989           0  \n7       12.363817        62.798309   4.401425           0  \n8       12.706049        53.928846   3.595017           0  \n9       17.927806        71.976601   4.370562           0  "},"exec_count":66}},"pos":12.5,"start":1657575844509,"state":"done","type":"cell"}
{"end":1657575885771,"exec_count":69,"id":"8d5d5f","input":"df['ph'].fillna(df['ph'].replace(7.0), inplace=True)\n\ndf['Sulfate'].fillna(df['Sulfate'].replace(333.0), inplace=True)\n\ndf['Trihalomethanes'].fillna(df['Trihalomethanes'].replace(66.0), inplace=True)\n\ndata.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ph</th>\n      <th>Hardness</th>\n      <th>Solids</th>\n      <th>Chloramines</th>\n      <th>Sulfate</th>\n      <th>Conductivity</th>\n      <th>Organic_carbon</th>\n      <th>Trihalomethanes</th>\n      <th>Turbidity</th>\n      <th>Potability</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7.000000</td>\n      <td>204.890455</td>\n      <td>20791.318981</td>\n      <td>7.300212</td>\n      <td>368.516441</td>\n      <td>564.308654</td>\n      <td>10.379783</td>\n      <td>86.990970</td>\n      <td>2.963135</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.716080</td>\n      <td>129.422921</td>\n      <td>18630.057858</td>\n      <td>6.635246</td>\n      <td>333.000000</td>\n      <td>592.885359</td>\n      <td>15.180013</td>\n      <td>56.329076</td>\n      <td>4.500656</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.099124</td>\n      <td>224.236259</td>\n      <td>19909.541732</td>\n      <td>9.275884</td>\n      <td>333.000000</td>\n      <td>418.606213</td>\n      <td>16.868637</td>\n      <td>66.420093</td>\n      <td>3.055934</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8.316766</td>\n      <td>214.373394</td>\n      <td>22018.417441</td>\n      <td>8.059332</td>\n      <td>356.886136</td>\n      <td>363.266516</td>\n      <td>18.436524</td>\n      <td>100.341674</td>\n      <td>4.628771</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9.092223</td>\n      <td>181.101509</td>\n      <td>17978.986339</td>\n      <td>6.546600</td>\n      <td>310.135738</td>\n      <td>398.410813</td>\n      <td>11.558279</td>\n      <td>31.997993</td>\n      <td>4.075075</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         ph    Hardness        Solids  Chloramines     Sulfate  Conductivity  \\\n0  7.000000  204.890455  20791.318981     7.300212  368.516441    564.308654   \n1  3.716080  129.422921  18630.057858     6.635246  333.000000    592.885359   \n2  8.099124  224.236259  19909.541732     9.275884  333.000000    418.606213   \n3  8.316766  214.373394  22018.417441     8.059332  356.886136    363.266516   \n4  9.092223  181.101509  17978.986339     6.546600  310.135738    398.410813   \n\n   Organic_carbon  Trihalomethanes  Turbidity  Potability  \n0       10.379783        86.990970   2.963135           0  \n1       15.180013        56.329076   4.500656           0  \n2       16.868637        66.420093   3.055934           0  \n3       18.436524       100.341674   4.628771           0  \n4       11.558279        31.997993   4.075075           0  "},"exec_count":69}},"pos":12.625,"scrolled":true,"start":1657575885744,"state":"done","type":"cell"}
{"end":1657576023708,"exec_count":70,"id":"7c0719","input":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nkn = KNeighborsClassifier()\n\"\"\"params = {\n    'n_neighbors' : [5, 25],\n    'weights': ['uniform', 'distance'],\n    'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute']\n}\ngrid_kn = GridSearchCV(estimator = kn,param_grid = params,scoring = 'accuracy', cv = 5, verbose = 1,n_jobs = -1)\ngrid_kn.fit(x_train, y_train)\nprint(grid_kn.best_params_)\nKNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',metric_params=None, n_jobs=-1, n_neighbors=5, p=2, weights='uniform')\nprint(grid_kn.score(x_test, y_test)) \"\"\"\nparams = {\n    'n_neighbors' : [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n}\ngrid_kn = GridSearchCV(estimator = kn,param_grid = params,scoring = 'accuracy', verbose = 1,n_jobs = -1)\ngrid_kn.fit(x_train, y_train)\nprint(grid_kn.best_params_)\nKNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',metric_params=None, n_jobs=-1, n_neighbors=5, p=2, weights='uniform')\nprint(grid_kn.score(x_test, y_test)) ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Fitting 5 folds for each of 15 candidates, totalling 75 fits\n"},"1":{"name":"stdout","text":"{'n_neighbors': 1}\n1.0\n"}},"pos":0.5,"start":1657576021470,"state":"done","type":"cell"}
{"id":0,"time":1657576357948,"type":"user"}
{"last_load":1657559835475,"type":"file"}